
test_stm32_adc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002590  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  0800269c  0800269c  0001269c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080026d0  080026d0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080026d0  080026d0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080026d0  080026d0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080026d0  080026d0  000126d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080026d4  080026d4  000126d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080026d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d4  2000000c  080026e4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e0  080026e4  000200e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006ed6  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001679  00000000  00000000  00026f0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000788  00000000  00000000  00028588  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000006c0  00000000  00000000  00028d10  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014daa  00000000  00000000  000293d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000690b  00000000  00000000  0003e17a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006b95c  00000000  00000000  00044a85  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b03e1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d40  00000000  00000000  000b045c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002684 	.word	0x08002684

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002684 	.word	0x08002684

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fa91 	bl	8000678 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f817 	bl	8000188 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f909 	bl	8000370 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 800015e:	f000 f8e9 	bl	8000334 <_ZL11MX_DMA_Initv>
  MX_ADC1_Init();
 8000162:	f000 f871 	bl	8000248 <_ZL12MX_ADC1_Initv>
  MX_USART1_UART_Init();
 8000166:	f000 f8b7 	bl	80002d8 <_ZL19MX_USART1_UART_Initv>
  /* USER CODE BEGIN 2 */
  int32_t adc_val;
  int8_t temp;
  uint8_t temp_ascii[6];
  HAL_ADC_Start(&hadc1);
 800016a:	4805      	ldr	r0, [pc, #20]	; (8000180 <main+0x34>)
 800016c:	f000 fbbe 	bl	80008ec <HAL_ADC_Start>
  uint8_t hello[] = "Testing";
 8000170:	4a04      	ldr	r2, [pc, #16]	; (8000184 <main+0x38>)
 8000172:	463b      	mov	r3, r7
 8000174:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000178:	e883 0003 	stmia.w	r3, {r0, r1}
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800017c:	e7fe      	b.n	800017c <main+0x30>
 800017e:	bf00      	nop
 8000180:	20000028 	.word	0x20000028
 8000184:	0800269c 	.word	0x0800269c

08000188 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000188:	b580      	push	{r7, lr}
 800018a:	b094      	sub	sp, #80	; 0x50
 800018c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800018e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000192:	2228      	movs	r2, #40	; 0x28
 8000194:	2100      	movs	r1, #0
 8000196:	4618      	mov	r0, r3
 8000198:	f002 fa6c 	bl	8002674 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800019c:	f107 0314 	add.w	r3, r7, #20
 80001a0:	2200      	movs	r2, #0
 80001a2:	601a      	str	r2, [r3, #0]
 80001a4:	605a      	str	r2, [r3, #4]
 80001a6:	609a      	str	r2, [r3, #8]
 80001a8:	60da      	str	r2, [r3, #12]
 80001aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001ac:	1d3b      	adds	r3, r7, #4
 80001ae:	2200      	movs	r2, #0
 80001b0:	601a      	str	r2, [r3, #0]
 80001b2:	605a      	str	r2, [r3, #4]
 80001b4:	609a      	str	r2, [r3, #8]
 80001b6:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001b8:	2302      	movs	r3, #2
 80001ba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001bc:	2301      	movs	r3, #1
 80001be:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001c0:	2310      	movs	r3, #16
 80001c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001c4:	2300      	movs	r3, #0
 80001c6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001cc:	4618      	mov	r0, r3
 80001ce:	f001 f9fd 	bl	80015cc <HAL_RCC_OscConfig>
 80001d2:	4603      	mov	r3, r0
 80001d4:	2b00      	cmp	r3, #0
 80001d6:	bf14      	ite	ne
 80001d8:	2301      	movne	r3, #1
 80001da:	2300      	moveq	r3, #0
 80001dc:	b2db      	uxtb	r3, r3
 80001de:	2b00      	cmp	r3, #0
 80001e0:	d001      	beq.n	80001e6 <_Z18SystemClock_Configv+0x5e>
  {
    Error_Handler();
 80001e2:	f000 f8db 	bl	800039c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001e6:	230f      	movs	r3, #15
 80001e8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80001ea:	2300      	movs	r3, #0
 80001ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001ee:	2300      	movs	r3, #0
 80001f0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80001f2:	2300      	movs	r3, #0
 80001f4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001f6:	2300      	movs	r3, #0
 80001f8:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80001fa:	f107 0314 	add.w	r3, r7, #20
 80001fe:	2100      	movs	r1, #0
 8000200:	4618      	mov	r0, r3
 8000202:	f001 fc63 	bl	8001acc <HAL_RCC_ClockConfig>
 8000206:	4603      	mov	r3, r0
 8000208:	2b00      	cmp	r3, #0
 800020a:	bf14      	ite	ne
 800020c:	2301      	movne	r3, #1
 800020e:	2300      	moveq	r3, #0
 8000210:	b2db      	uxtb	r3, r3
 8000212:	2b00      	cmp	r3, #0
 8000214:	d001      	beq.n	800021a <_Z18SystemClock_Configv+0x92>
  {
    Error_Handler();
 8000216:	f000 f8c1 	bl	800039c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800021a:	2302      	movs	r3, #2
 800021c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800021e:	2300      	movs	r3, #0
 8000220:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000222:	1d3b      	adds	r3, r7, #4
 8000224:	4618      	mov	r0, r3
 8000226:	f001 fded 	bl	8001e04 <HAL_RCCEx_PeriphCLKConfig>
 800022a:	4603      	mov	r3, r0
 800022c:	2b00      	cmp	r3, #0
 800022e:	bf14      	ite	ne
 8000230:	2301      	movne	r3, #1
 8000232:	2300      	moveq	r3, #0
 8000234:	b2db      	uxtb	r3, r3
 8000236:	2b00      	cmp	r3, #0
 8000238:	d001      	beq.n	800023e <_Z18SystemClock_Configv+0xb6>
  {
    Error_Handler();
 800023a:	f000 f8af 	bl	800039c <Error_Handler>
  }
}
 800023e:	bf00      	nop
 8000240:	3750      	adds	r7, #80	; 0x50
 8000242:	46bd      	mov	sp, r7
 8000244:	bd80      	pop	{r7, pc}
	...

08000248 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b084      	sub	sp, #16
 800024c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800024e:	1d3b      	adds	r3, r7, #4
 8000250:	2200      	movs	r2, #0
 8000252:	601a      	str	r2, [r3, #0]
 8000254:	605a      	str	r2, [r3, #4]
 8000256:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000258:	4b1d      	ldr	r3, [pc, #116]	; (80002d0 <_ZL12MX_ADC1_Initv+0x88>)
 800025a:	4a1e      	ldr	r2, [pc, #120]	; (80002d4 <_ZL12MX_ADC1_Initv+0x8c>)
 800025c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800025e:	4b1c      	ldr	r3, [pc, #112]	; (80002d0 <_ZL12MX_ADC1_Initv+0x88>)
 8000260:	2200      	movs	r2, #0
 8000262:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000264:	4b1a      	ldr	r3, [pc, #104]	; (80002d0 <_ZL12MX_ADC1_Initv+0x88>)
 8000266:	2200      	movs	r2, #0
 8000268:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800026a:	4b19      	ldr	r3, [pc, #100]	; (80002d0 <_ZL12MX_ADC1_Initv+0x88>)
 800026c:	2200      	movs	r2, #0
 800026e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000270:	4b17      	ldr	r3, [pc, #92]	; (80002d0 <_ZL12MX_ADC1_Initv+0x88>)
 8000272:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000276:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000278:	4b15      	ldr	r3, [pc, #84]	; (80002d0 <_ZL12MX_ADC1_Initv+0x88>)
 800027a:	2200      	movs	r2, #0
 800027c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800027e:	4b14      	ldr	r3, [pc, #80]	; (80002d0 <_ZL12MX_ADC1_Initv+0x88>)
 8000280:	2201      	movs	r2, #1
 8000282:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000284:	4812      	ldr	r0, [pc, #72]	; (80002d0 <_ZL12MX_ADC1_Initv+0x88>)
 8000286:	f000 fa59 	bl	800073c <HAL_ADC_Init>
 800028a:	4603      	mov	r3, r0
 800028c:	2b00      	cmp	r3, #0
 800028e:	bf14      	ite	ne
 8000290:	2301      	movne	r3, #1
 8000292:	2300      	moveq	r3, #0
 8000294:	b2db      	uxtb	r3, r3
 8000296:	2b00      	cmp	r3, #0
 8000298:	d001      	beq.n	800029e <_ZL12MX_ADC1_Initv+0x56>
  {
    Error_Handler();
 800029a:	f000 f87f 	bl	800039c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800029e:	2310      	movs	r3, #16
 80002a0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80002a2:	2301      	movs	r3, #1
 80002a4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80002a6:	2307      	movs	r3, #7
 80002a8:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002aa:	1d3b      	adds	r3, r7, #4
 80002ac:	4619      	mov	r1, r3
 80002ae:	4808      	ldr	r0, [pc, #32]	; (80002d0 <_ZL12MX_ADC1_Initv+0x88>)
 80002b0:	f000 fbca 	bl	8000a48 <HAL_ADC_ConfigChannel>
 80002b4:	4603      	mov	r3, r0
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	bf14      	ite	ne
 80002ba:	2301      	movne	r3, #1
 80002bc:	2300      	moveq	r3, #0
 80002be:	b2db      	uxtb	r3, r3
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d001      	beq.n	80002c8 <_ZL12MX_ADC1_Initv+0x80>
  {
    Error_Handler();
 80002c4:	f000 f86a 	bl	800039c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80002c8:	bf00      	nop
 80002ca:	3710      	adds	r7, #16
 80002cc:	46bd      	mov	sp, r7
 80002ce:	bd80      	pop	{r7, pc}
 80002d0:	20000028 	.word	0x20000028
 80002d4:	40012400 	.word	0x40012400

080002d8 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80002dc:	4b13      	ldr	r3, [pc, #76]	; (800032c <_ZL19MX_USART1_UART_Initv+0x54>)
 80002de:	4a14      	ldr	r2, [pc, #80]	; (8000330 <_ZL19MX_USART1_UART_Initv+0x58>)
 80002e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80002e2:	4b12      	ldr	r3, [pc, #72]	; (800032c <_ZL19MX_USART1_UART_Initv+0x54>)
 80002e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80002ea:	4b10      	ldr	r3, [pc, #64]	; (800032c <_ZL19MX_USART1_UART_Initv+0x54>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80002f0:	4b0e      	ldr	r3, [pc, #56]	; (800032c <_ZL19MX_USART1_UART_Initv+0x54>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80002f6:	4b0d      	ldr	r3, [pc, #52]	; (800032c <_ZL19MX_USART1_UART_Initv+0x54>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80002fc:	4b0b      	ldr	r3, [pc, #44]	; (800032c <_ZL19MX_USART1_UART_Initv+0x54>)
 80002fe:	220c      	movs	r2, #12
 8000300:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000302:	4b0a      	ldr	r3, [pc, #40]	; (800032c <_ZL19MX_USART1_UART_Initv+0x54>)
 8000304:	2200      	movs	r2, #0
 8000306:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000308:	4b08      	ldr	r3, [pc, #32]	; (800032c <_ZL19MX_USART1_UART_Initv+0x54>)
 800030a:	2200      	movs	r2, #0
 800030c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800030e:	4807      	ldr	r0, [pc, #28]	; (800032c <_ZL19MX_USART1_UART_Initv+0x54>)
 8000310:	f001 fe2e 	bl	8001f70 <HAL_UART_Init>
 8000314:	4603      	mov	r3, r0
 8000316:	2b00      	cmp	r3, #0
 8000318:	bf14      	ite	ne
 800031a:	2301      	movne	r3, #1
 800031c:	2300      	moveq	r3, #0
 800031e:	b2db      	uxtb	r3, r3
 8000320:	2b00      	cmp	r3, #0
 8000322:	d001      	beq.n	8000328 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8000324:	f000 f83a 	bl	800039c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000328:	bf00      	nop
 800032a:	bd80      	pop	{r7, pc}
 800032c:	2000009c 	.word	0x2000009c
 8000330:	40013800 	.word	0x40013800

08000334 <_ZL11MX_DMA_Initv>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b082      	sub	sp, #8
 8000338:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800033a:	4b0c      	ldr	r3, [pc, #48]	; (800036c <_ZL11MX_DMA_Initv+0x38>)
 800033c:	695b      	ldr	r3, [r3, #20]
 800033e:	4a0b      	ldr	r2, [pc, #44]	; (800036c <_ZL11MX_DMA_Initv+0x38>)
 8000340:	f043 0301 	orr.w	r3, r3, #1
 8000344:	6153      	str	r3, [r2, #20]
 8000346:	4b09      	ldr	r3, [pc, #36]	; (800036c <_ZL11MX_DMA_Initv+0x38>)
 8000348:	695b      	ldr	r3, [r3, #20]
 800034a:	f003 0301 	and.w	r3, r3, #1
 800034e:	607b      	str	r3, [r7, #4]
 8000350:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000352:	2200      	movs	r2, #0
 8000354:	2100      	movs	r1, #0
 8000356:	200b      	movs	r0, #11
 8000358:	f000 fdd1 	bl	8000efe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800035c:	200b      	movs	r0, #11
 800035e:	f000 fdea 	bl	8000f36 <HAL_NVIC_EnableIRQ>

}
 8000362:	bf00      	nop
 8000364:	3708      	adds	r7, #8
 8000366:	46bd      	mov	sp, r7
 8000368:	bd80      	pop	{r7, pc}
 800036a:	bf00      	nop
 800036c:	40021000 	.word	0x40021000

08000370 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000370:	b480      	push	{r7}
 8000372:	b083      	sub	sp, #12
 8000374:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000376:	4b08      	ldr	r3, [pc, #32]	; (8000398 <_ZL12MX_GPIO_Initv+0x28>)
 8000378:	699b      	ldr	r3, [r3, #24]
 800037a:	4a07      	ldr	r2, [pc, #28]	; (8000398 <_ZL12MX_GPIO_Initv+0x28>)
 800037c:	f043 0304 	orr.w	r3, r3, #4
 8000380:	6193      	str	r3, [r2, #24]
 8000382:	4b05      	ldr	r3, [pc, #20]	; (8000398 <_ZL12MX_GPIO_Initv+0x28>)
 8000384:	699b      	ldr	r3, [r3, #24]
 8000386:	f003 0304 	and.w	r3, r3, #4
 800038a:	607b      	str	r3, [r7, #4]
 800038c:	687b      	ldr	r3, [r7, #4]

}
 800038e:	bf00      	nop
 8000390:	370c      	adds	r7, #12
 8000392:	46bd      	mov	sp, r7
 8000394:	bc80      	pop	{r7}
 8000396:	4770      	bx	lr
 8000398:	40021000 	.word	0x40021000

0800039c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800039c:	b480      	push	{r7}
 800039e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80003a0:	bf00      	nop
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bc80      	pop	{r7}
 80003a6:	4770      	bx	lr

080003a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003a8:	b480      	push	{r7}
 80003aa:	b085      	sub	sp, #20
 80003ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003ae:	4b15      	ldr	r3, [pc, #84]	; (8000404 <HAL_MspInit+0x5c>)
 80003b0:	699b      	ldr	r3, [r3, #24]
 80003b2:	4a14      	ldr	r2, [pc, #80]	; (8000404 <HAL_MspInit+0x5c>)
 80003b4:	f043 0301 	orr.w	r3, r3, #1
 80003b8:	6193      	str	r3, [r2, #24]
 80003ba:	4b12      	ldr	r3, [pc, #72]	; (8000404 <HAL_MspInit+0x5c>)
 80003bc:	699b      	ldr	r3, [r3, #24]
 80003be:	f003 0301 	and.w	r3, r3, #1
 80003c2:	60bb      	str	r3, [r7, #8]
 80003c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003c6:	4b0f      	ldr	r3, [pc, #60]	; (8000404 <HAL_MspInit+0x5c>)
 80003c8:	69db      	ldr	r3, [r3, #28]
 80003ca:	4a0e      	ldr	r2, [pc, #56]	; (8000404 <HAL_MspInit+0x5c>)
 80003cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003d0:	61d3      	str	r3, [r2, #28]
 80003d2:	4b0c      	ldr	r3, [pc, #48]	; (8000404 <HAL_MspInit+0x5c>)
 80003d4:	69db      	ldr	r3, [r3, #28]
 80003d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003da:	607b      	str	r3, [r7, #4]
 80003dc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled 
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80003de:	4b0a      	ldr	r3, [pc, #40]	; (8000408 <HAL_MspInit+0x60>)
 80003e0:	685b      	ldr	r3, [r3, #4]
 80003e2:	60fb      	str	r3, [r7, #12]
 80003e4:	68fb      	ldr	r3, [r7, #12]
 80003e6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80003ea:	60fb      	str	r3, [r7, #12]
 80003ec:	68fb      	ldr	r3, [r7, #12]
 80003ee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80003f2:	60fb      	str	r3, [r7, #12]
 80003f4:	4a04      	ldr	r2, [pc, #16]	; (8000408 <HAL_MspInit+0x60>)
 80003f6:	68fb      	ldr	r3, [r7, #12]
 80003f8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003fa:	bf00      	nop
 80003fc:	3714      	adds	r7, #20
 80003fe:	46bd      	mov	sp, r7
 8000400:	bc80      	pop	{r7}
 8000402:	4770      	bx	lr
 8000404:	40021000 	.word	0x40021000
 8000408:	40010000 	.word	0x40010000

0800040c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b084      	sub	sp, #16
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	4a1d      	ldr	r2, [pc, #116]	; (8000490 <HAL_ADC_MspInit+0x84>)
 800041a:	4293      	cmp	r3, r2
 800041c:	d133      	bne.n	8000486 <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800041e:	4b1d      	ldr	r3, [pc, #116]	; (8000494 <HAL_ADC_MspInit+0x88>)
 8000420:	699b      	ldr	r3, [r3, #24]
 8000422:	4a1c      	ldr	r2, [pc, #112]	; (8000494 <HAL_ADC_MspInit+0x88>)
 8000424:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000428:	6193      	str	r3, [r2, #24]
 800042a:	4b1a      	ldr	r3, [pc, #104]	; (8000494 <HAL_ADC_MspInit+0x88>)
 800042c:	699b      	ldr	r3, [r3, #24]
 800042e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000432:	60fb      	str	r3, [r7, #12]
 8000434:	68fb      	ldr	r3, [r7, #12]
  
    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000436:	4b18      	ldr	r3, [pc, #96]	; (8000498 <HAL_ADC_MspInit+0x8c>)
 8000438:	4a18      	ldr	r2, [pc, #96]	; (800049c <HAL_ADC_MspInit+0x90>)
 800043a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800043c:	4b16      	ldr	r3, [pc, #88]	; (8000498 <HAL_ADC_MspInit+0x8c>)
 800043e:	2200      	movs	r2, #0
 8000440:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000442:	4b15      	ldr	r3, [pc, #84]	; (8000498 <HAL_ADC_MspInit+0x8c>)
 8000444:	2200      	movs	r2, #0
 8000446:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000448:	4b13      	ldr	r3, [pc, #76]	; (8000498 <HAL_ADC_MspInit+0x8c>)
 800044a:	2280      	movs	r2, #128	; 0x80
 800044c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800044e:	4b12      	ldr	r3, [pc, #72]	; (8000498 <HAL_ADC_MspInit+0x8c>)
 8000450:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000454:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000456:	4b10      	ldr	r3, [pc, #64]	; (8000498 <HAL_ADC_MspInit+0x8c>)
 8000458:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800045c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800045e:	4b0e      	ldr	r3, [pc, #56]	; (8000498 <HAL_ADC_MspInit+0x8c>)
 8000460:	2200      	movs	r2, #0
 8000462:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000464:	4b0c      	ldr	r3, [pc, #48]	; (8000498 <HAL_ADC_MspInit+0x8c>)
 8000466:	2200      	movs	r2, #0
 8000468:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800046a:	480b      	ldr	r0, [pc, #44]	; (8000498 <HAL_ADC_MspInit+0x8c>)
 800046c:	f000 fd7e 	bl	8000f6c <HAL_DMA_Init>
 8000470:	4603      	mov	r3, r0
 8000472:	2b00      	cmp	r3, #0
 8000474:	d001      	beq.n	800047a <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8000476:	f7ff ff91 	bl	800039c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	4a06      	ldr	r2, [pc, #24]	; (8000498 <HAL_ADC_MspInit+0x8c>)
 800047e:	621a      	str	r2, [r3, #32]
 8000480:	4a05      	ldr	r2, [pc, #20]	; (8000498 <HAL_ADC_MspInit+0x8c>)
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000486:	bf00      	nop
 8000488:	3710      	adds	r7, #16
 800048a:	46bd      	mov	sp, r7
 800048c:	bd80      	pop	{r7, pc}
 800048e:	bf00      	nop
 8000490:	40012400 	.word	0x40012400
 8000494:	40021000 	.word	0x40021000
 8000498:	20000058 	.word	0x20000058
 800049c:	40020008 	.word	0x40020008

080004a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b088      	sub	sp, #32
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004a8:	f107 0310 	add.w	r3, r7, #16
 80004ac:	2200      	movs	r2, #0
 80004ae:	601a      	str	r2, [r3, #0]
 80004b0:	605a      	str	r2, [r3, #4]
 80004b2:	609a      	str	r2, [r3, #8]
 80004b4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	4a20      	ldr	r2, [pc, #128]	; (800053c <HAL_UART_MspInit+0x9c>)
 80004bc:	4293      	cmp	r3, r2
 80004be:	d139      	bne.n	8000534 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80004c0:	4b1f      	ldr	r3, [pc, #124]	; (8000540 <HAL_UART_MspInit+0xa0>)
 80004c2:	699b      	ldr	r3, [r3, #24]
 80004c4:	4a1e      	ldr	r2, [pc, #120]	; (8000540 <HAL_UART_MspInit+0xa0>)
 80004c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004ca:	6193      	str	r3, [r2, #24]
 80004cc:	4b1c      	ldr	r3, [pc, #112]	; (8000540 <HAL_UART_MspInit+0xa0>)
 80004ce:	699b      	ldr	r3, [r3, #24]
 80004d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80004d4:	60fb      	str	r3, [r7, #12]
 80004d6:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004d8:	4b19      	ldr	r3, [pc, #100]	; (8000540 <HAL_UART_MspInit+0xa0>)
 80004da:	699b      	ldr	r3, [r3, #24]
 80004dc:	4a18      	ldr	r2, [pc, #96]	; (8000540 <HAL_UART_MspInit+0xa0>)
 80004de:	f043 0304 	orr.w	r3, r3, #4
 80004e2:	6193      	str	r3, [r2, #24]
 80004e4:	4b16      	ldr	r3, [pc, #88]	; (8000540 <HAL_UART_MspInit+0xa0>)
 80004e6:	699b      	ldr	r3, [r3, #24]
 80004e8:	f003 0304 	and.w	r3, r3, #4
 80004ec:	60bb      	str	r3, [r7, #8]
 80004ee:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80004f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80004f4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004f6:	2302      	movs	r3, #2
 80004f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004fa:	2303      	movs	r3, #3
 80004fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004fe:	f107 0310 	add.w	r3, r7, #16
 8000502:	4619      	mov	r1, r3
 8000504:	480f      	ldr	r0, [pc, #60]	; (8000544 <HAL_UART_MspInit+0xa4>)
 8000506:	f000 ff07 	bl	8001318 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800050a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800050e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000510:	2300      	movs	r3, #0
 8000512:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000514:	2300      	movs	r3, #0
 8000516:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000518:	f107 0310 	add.w	r3, r7, #16
 800051c:	4619      	mov	r1, r3
 800051e:	4809      	ldr	r0, [pc, #36]	; (8000544 <HAL_UART_MspInit+0xa4>)
 8000520:	f000 fefa 	bl	8001318 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000524:	2200      	movs	r2, #0
 8000526:	2100      	movs	r1, #0
 8000528:	2025      	movs	r0, #37	; 0x25
 800052a:	f000 fce8 	bl	8000efe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800052e:	2025      	movs	r0, #37	; 0x25
 8000530:	f000 fd01 	bl	8000f36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000534:	bf00      	nop
 8000536:	3720      	adds	r7, #32
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}
 800053c:	40013800 	.word	0x40013800
 8000540:	40021000 	.word	0x40021000
 8000544:	40010800 	.word	0x40010800

08000548 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800054c:	bf00      	nop
 800054e:	46bd      	mov	sp, r7
 8000550:	bc80      	pop	{r7}
 8000552:	4770      	bx	lr

08000554 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000558:	e7fe      	b.n	8000558 <HardFault_Handler+0x4>

0800055a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800055a:	b480      	push	{r7}
 800055c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800055e:	e7fe      	b.n	800055e <MemManage_Handler+0x4>

08000560 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000564:	e7fe      	b.n	8000564 <BusFault_Handler+0x4>

08000566 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000566:	b480      	push	{r7}
 8000568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800056a:	e7fe      	b.n	800056a <UsageFault_Handler+0x4>

0800056c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000570:	bf00      	nop
 8000572:	46bd      	mov	sp, r7
 8000574:	bc80      	pop	{r7}
 8000576:	4770      	bx	lr

08000578 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800057c:	bf00      	nop
 800057e:	46bd      	mov	sp, r7
 8000580:	bc80      	pop	{r7}
 8000582:	4770      	bx	lr

08000584 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000588:	bf00      	nop
 800058a:	46bd      	mov	sp, r7
 800058c:	bc80      	pop	{r7}
 800058e:	4770      	bx	lr

08000590 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000594:	f000 f8b6 	bl	8000704 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000598:	bf00      	nop
 800059a:	bd80      	pop	{r7, pc}

0800059c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80005a0:	4802      	ldr	r0, [pc, #8]	; (80005ac <DMA1_Channel1_IRQHandler+0x10>)
 80005a2:	f000 fdb3 	bl	800110c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80005a6:	bf00      	nop
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	20000058 	.word	0x20000058

080005b0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80005b4:	4802      	ldr	r0, [pc, #8]	; (80005c0 <USART1_IRQHandler+0x10>)
 80005b6:	f001 fd29 	bl	800200c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80005ba:	bf00      	nop
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	2000009c 	.word	0x2000009c

080005c4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80005c8:	4b15      	ldr	r3, [pc, #84]	; (8000620 <SystemInit+0x5c>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a14      	ldr	r2, [pc, #80]	; (8000620 <SystemInit+0x5c>)
 80005ce:	f043 0301 	orr.w	r3, r3, #1
 80005d2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80005d4:	4b12      	ldr	r3, [pc, #72]	; (8000620 <SystemInit+0x5c>)
 80005d6:	685a      	ldr	r2, [r3, #4]
 80005d8:	4911      	ldr	r1, [pc, #68]	; (8000620 <SystemInit+0x5c>)
 80005da:	4b12      	ldr	r3, [pc, #72]	; (8000624 <SystemInit+0x60>)
 80005dc:	4013      	ands	r3, r2
 80005de:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80005e0:	4b0f      	ldr	r3, [pc, #60]	; (8000620 <SystemInit+0x5c>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a0e      	ldr	r2, [pc, #56]	; (8000620 <SystemInit+0x5c>)
 80005e6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80005ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80005ee:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80005f0:	4b0b      	ldr	r3, [pc, #44]	; (8000620 <SystemInit+0x5c>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a0a      	ldr	r2, [pc, #40]	; (8000620 <SystemInit+0x5c>)
 80005f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80005fa:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80005fc:	4b08      	ldr	r3, [pc, #32]	; (8000620 <SystemInit+0x5c>)
 80005fe:	685b      	ldr	r3, [r3, #4]
 8000600:	4a07      	ldr	r2, [pc, #28]	; (8000620 <SystemInit+0x5c>)
 8000602:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000606:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000608:	4b05      	ldr	r3, [pc, #20]	; (8000620 <SystemInit+0x5c>)
 800060a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800060e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000610:	4b05      	ldr	r3, [pc, #20]	; (8000628 <SystemInit+0x64>)
 8000612:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000616:	609a      	str	r2, [r3, #8]
#endif 
}
 8000618:	bf00      	nop
 800061a:	46bd      	mov	sp, r7
 800061c:	bc80      	pop	{r7}
 800061e:	4770      	bx	lr
 8000620:	40021000 	.word	0x40021000
 8000624:	f8ff0000 	.word	0xf8ff0000
 8000628:	e000ed00 	.word	0xe000ed00

0800062c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800062c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800062e:	e003      	b.n	8000638 <LoopCopyDataInit>

08000630 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000630:	4b0b      	ldr	r3, [pc, #44]	; (8000660 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000632:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000634:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000636:	3104      	adds	r1, #4

08000638 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000638:	480a      	ldr	r0, [pc, #40]	; (8000664 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800063a:	4b0b      	ldr	r3, [pc, #44]	; (8000668 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800063c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800063e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000640:	d3f6      	bcc.n	8000630 <CopyDataInit>
  ldr r2, =_sbss
 8000642:	4a0a      	ldr	r2, [pc, #40]	; (800066c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000644:	e002      	b.n	800064c <LoopFillZerobss>

08000646 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000646:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000648:	f842 3b04 	str.w	r3, [r2], #4

0800064c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800064c:	4b08      	ldr	r3, [pc, #32]	; (8000670 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800064e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000650:	d3f9      	bcc.n	8000646 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000652:	f7ff ffb7 	bl	80005c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000656:	f001 ffe9 	bl	800262c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800065a:	f7ff fd77 	bl	800014c <main>
  bx lr
 800065e:	4770      	bx	lr
  ldr r3, =_sidata
 8000660:	080026d8 	.word	0x080026d8
  ldr r0, =_sdata
 8000664:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000668:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 800066c:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000670:	200000e0 	.word	0x200000e0

08000674 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000674:	e7fe      	b.n	8000674 <ADC1_2_IRQHandler>
	...

08000678 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800067c:	4b08      	ldr	r3, [pc, #32]	; (80006a0 <HAL_Init+0x28>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a07      	ldr	r2, [pc, #28]	; (80006a0 <HAL_Init+0x28>)
 8000682:	f043 0310 	orr.w	r3, r3, #16
 8000686:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000688:	2003      	movs	r0, #3
 800068a:	f000 fc2d 	bl	8000ee8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800068e:	2000      	movs	r0, #0
 8000690:	f000 f808 	bl	80006a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000694:	f7ff fe88 	bl	80003a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000698:	2300      	movs	r3, #0
}
 800069a:	4618      	mov	r0, r3
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	40022000 	.word	0x40022000

080006a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006ac:	4b12      	ldr	r3, [pc, #72]	; (80006f8 <HAL_InitTick+0x54>)
 80006ae:	681a      	ldr	r2, [r3, #0]
 80006b0:	4b12      	ldr	r3, [pc, #72]	; (80006fc <HAL_InitTick+0x58>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	4619      	mov	r1, r3
 80006b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80006be:	fbb2 f3f3 	udiv	r3, r2, r3
 80006c2:	4618      	mov	r0, r3
 80006c4:	f000 fc45 	bl	8000f52 <HAL_SYSTICK_Config>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006ce:	2301      	movs	r3, #1
 80006d0:	e00e      	b.n	80006f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	2b0f      	cmp	r3, #15
 80006d6:	d80a      	bhi.n	80006ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006d8:	2200      	movs	r2, #0
 80006da:	6879      	ldr	r1, [r7, #4]
 80006dc:	f04f 30ff 	mov.w	r0, #4294967295
 80006e0:	f000 fc0d 	bl	8000efe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006e4:	4a06      	ldr	r2, [pc, #24]	; (8000700 <HAL_InitTick+0x5c>)
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006ea:	2300      	movs	r3, #0
 80006ec:	e000      	b.n	80006f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006ee:	2301      	movs	r3, #1
}
 80006f0:	4618      	mov	r0, r3
 80006f2:	3708      	adds	r7, #8
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	20000000 	.word	0x20000000
 80006fc:	20000008 	.word	0x20000008
 8000700:	20000004 	.word	0x20000004

08000704 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000708:	4b05      	ldr	r3, [pc, #20]	; (8000720 <HAL_IncTick+0x1c>)
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	461a      	mov	r2, r3
 800070e:	4b05      	ldr	r3, [pc, #20]	; (8000724 <HAL_IncTick+0x20>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	4413      	add	r3, r2
 8000714:	4a03      	ldr	r2, [pc, #12]	; (8000724 <HAL_IncTick+0x20>)
 8000716:	6013      	str	r3, [r2, #0]
}
 8000718:	bf00      	nop
 800071a:	46bd      	mov	sp, r7
 800071c:	bc80      	pop	{r7}
 800071e:	4770      	bx	lr
 8000720:	20000008 	.word	0x20000008
 8000724:	200000dc 	.word	0x200000dc

08000728 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  return uwTick;
 800072c:	4b02      	ldr	r3, [pc, #8]	; (8000738 <HAL_GetTick+0x10>)
 800072e:	681b      	ldr	r3, [r3, #0]
}
 8000730:	4618      	mov	r0, r3
 8000732:	46bd      	mov	sp, r7
 8000734:	bc80      	pop	{r7}
 8000736:	4770      	bx	lr
 8000738:	200000dc 	.word	0x200000dc

0800073c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b086      	sub	sp, #24
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000744:	2300      	movs	r3, #0
 8000746:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000748:	2300      	movs	r3, #0
 800074a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800074c:	2300      	movs	r3, #0
 800074e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000750:	2300      	movs	r3, #0
 8000752:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	2b00      	cmp	r3, #0
 8000758:	d101      	bne.n	800075e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800075a:	2301      	movs	r3, #1
 800075c:	e0be      	b.n	80008dc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	689b      	ldr	r3, [r3, #8]
 8000762:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000768:	2b00      	cmp	r3, #0
 800076a:	d109      	bne.n	8000780 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	2200      	movs	r2, #0
 8000770:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	2200      	movs	r2, #0
 8000776:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800077a:	6878      	ldr	r0, [r7, #4]
 800077c:	f7ff fe46 	bl	800040c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000780:	6878      	ldr	r0, [r7, #4]
 8000782:	f000 faab 	bl	8000cdc <ADC_ConversionStop_Disable>
 8000786:	4603      	mov	r3, r0
 8000788:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800078e:	f003 0310 	and.w	r3, r3, #16
 8000792:	2b00      	cmp	r3, #0
 8000794:	f040 8099 	bne.w	80008ca <HAL_ADC_Init+0x18e>
 8000798:	7dfb      	ldrb	r3, [r7, #23]
 800079a:	2b00      	cmp	r3, #0
 800079c:	f040 8095 	bne.w	80008ca <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007a4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80007a8:	f023 0302 	bic.w	r3, r3, #2
 80007ac:	f043 0202 	orr.w	r2, r3, #2
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80007bc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	7b1b      	ldrb	r3, [r3, #12]
 80007c2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80007c4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80007c6:	68ba      	ldr	r2, [r7, #8]
 80007c8:	4313      	orrs	r3, r2
 80007ca:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	689b      	ldr	r3, [r3, #8]
 80007d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80007d4:	d003      	beq.n	80007de <HAL_ADC_Init+0xa2>
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	689b      	ldr	r3, [r3, #8]
 80007da:	2b01      	cmp	r3, #1
 80007dc:	d102      	bne.n	80007e4 <HAL_ADC_Init+0xa8>
 80007de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007e2:	e000      	b.n	80007e6 <HAL_ADC_Init+0xaa>
 80007e4:	2300      	movs	r3, #0
 80007e6:	693a      	ldr	r2, [r7, #16]
 80007e8:	4313      	orrs	r3, r2
 80007ea:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	7d1b      	ldrb	r3, [r3, #20]
 80007f0:	2b01      	cmp	r3, #1
 80007f2:	d119      	bne.n	8000828 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	7b1b      	ldrb	r3, [r3, #12]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d109      	bne.n	8000810 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	699b      	ldr	r3, [r3, #24]
 8000800:	3b01      	subs	r3, #1
 8000802:	035a      	lsls	r2, r3, #13
 8000804:	693b      	ldr	r3, [r7, #16]
 8000806:	4313      	orrs	r3, r2
 8000808:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800080c:	613b      	str	r3, [r7, #16]
 800080e:	e00b      	b.n	8000828 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000814:	f043 0220 	orr.w	r2, r3, #32
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000820:	f043 0201 	orr.w	r2, r3, #1
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	685b      	ldr	r3, [r3, #4]
 800082e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	693a      	ldr	r2, [r7, #16]
 8000838:	430a      	orrs	r2, r1
 800083a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	689a      	ldr	r2, [r3, #8]
 8000842:	4b28      	ldr	r3, [pc, #160]	; (80008e4 <HAL_ADC_Init+0x1a8>)
 8000844:	4013      	ands	r3, r2
 8000846:	687a      	ldr	r2, [r7, #4]
 8000848:	6812      	ldr	r2, [r2, #0]
 800084a:	68b9      	ldr	r1, [r7, #8]
 800084c:	430b      	orrs	r3, r1
 800084e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	689b      	ldr	r3, [r3, #8]
 8000854:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000858:	d003      	beq.n	8000862 <HAL_ADC_Init+0x126>
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	689b      	ldr	r3, [r3, #8]
 800085e:	2b01      	cmp	r3, #1
 8000860:	d104      	bne.n	800086c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	691b      	ldr	r3, [r3, #16]
 8000866:	3b01      	subs	r3, #1
 8000868:	051b      	lsls	r3, r3, #20
 800086a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000872:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	68fa      	ldr	r2, [r7, #12]
 800087c:	430a      	orrs	r2, r1
 800087e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	689a      	ldr	r2, [r3, #8]
 8000886:	4b18      	ldr	r3, [pc, #96]	; (80008e8 <HAL_ADC_Init+0x1ac>)
 8000888:	4013      	ands	r3, r2
 800088a:	68ba      	ldr	r2, [r7, #8]
 800088c:	429a      	cmp	r2, r3
 800088e:	d10b      	bne.n	80008a8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	2200      	movs	r2, #0
 8000894:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800089a:	f023 0303 	bic.w	r3, r3, #3
 800089e:	f043 0201 	orr.w	r2, r3, #1
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80008a6:	e018      	b.n	80008da <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008ac:	f023 0312 	bic.w	r3, r3, #18
 80008b0:	f043 0210 	orr.w	r2, r3, #16
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008bc:	f043 0201 	orr.w	r2, r3, #1
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80008c4:	2301      	movs	r3, #1
 80008c6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80008c8:	e007      	b.n	80008da <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008ce:	f043 0210 	orr.w	r2, r3, #16
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80008d6:	2301      	movs	r3, #1
 80008d8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80008da:	7dfb      	ldrb	r3, [r7, #23]
}
 80008dc:	4618      	mov	r0, r3
 80008de:	3718      	adds	r7, #24
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	ffe1f7fd 	.word	0xffe1f7fd
 80008e8:	ff1f0efe 	.word	0xff1f0efe

080008ec <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b084      	sub	sp, #16
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80008f4:	2300      	movs	r3, #0
 80008f6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80008fe:	2b01      	cmp	r3, #1
 8000900:	d101      	bne.n	8000906 <HAL_ADC_Start+0x1a>
 8000902:	2302      	movs	r3, #2
 8000904:	e098      	b.n	8000a38 <HAL_ADC_Start+0x14c>
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	2201      	movs	r2, #1
 800090a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800090e:	6878      	ldr	r0, [r7, #4]
 8000910:	f000 f992 	bl	8000c38 <ADC_Enable>
 8000914:	4603      	mov	r3, r0
 8000916:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000918:	7bfb      	ldrb	r3, [r7, #15]
 800091a:	2b00      	cmp	r3, #0
 800091c:	f040 8087 	bne.w	8000a2e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000924:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000928:	f023 0301 	bic.w	r3, r3, #1
 800092c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a41      	ldr	r2, [pc, #260]	; (8000a40 <HAL_ADC_Start+0x154>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d105      	bne.n	800094a <HAL_ADC_Start+0x5e>
 800093e:	4b41      	ldr	r3, [pc, #260]	; (8000a44 <HAL_ADC_Start+0x158>)
 8000940:	685b      	ldr	r3, [r3, #4]
 8000942:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000946:	2b00      	cmp	r3, #0
 8000948:	d115      	bne.n	8000976 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800094e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	685b      	ldr	r3, [r3, #4]
 800095c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000960:	2b00      	cmp	r3, #0
 8000962:	d026      	beq.n	80009b2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000968:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800096c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000974:	e01d      	b.n	80009b2 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800097a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	4a2f      	ldr	r2, [pc, #188]	; (8000a44 <HAL_ADC_Start+0x158>)
 8000988:	4293      	cmp	r3, r2
 800098a:	d004      	beq.n	8000996 <HAL_ADC_Start+0xaa>
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a2b      	ldr	r2, [pc, #172]	; (8000a40 <HAL_ADC_Start+0x154>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d10d      	bne.n	80009b2 <HAL_ADC_Start+0xc6>
 8000996:	4b2b      	ldr	r3, [pc, #172]	; (8000a44 <HAL_ADC_Start+0x158>)
 8000998:	685b      	ldr	r3, [r3, #4]
 800099a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d007      	beq.n	80009b2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009a6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80009aa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d006      	beq.n	80009cc <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009c2:	f023 0206 	bic.w	r2, r3, #6
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	62da      	str	r2, [r3, #44]	; 0x2c
 80009ca:	e002      	b.n	80009d2 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	2200      	movs	r2, #0
 80009d0:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	2200      	movs	r2, #0
 80009d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	f06f 0202 	mvn.w	r2, #2
 80009e2:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	689b      	ldr	r3, [r3, #8]
 80009ea:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80009ee:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80009f2:	d113      	bne.n	8000a1c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80009f8:	4a11      	ldr	r2, [pc, #68]	; (8000a40 <HAL_ADC_Start+0x154>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d105      	bne.n	8000a0a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80009fe:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <HAL_ADC_Start+0x158>)
 8000a00:	685b      	ldr	r3, [r3, #4]
 8000a02:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d108      	bne.n	8000a1c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	689a      	ldr	r2, [r3, #8]
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000a18:	609a      	str	r2, [r3, #8]
 8000a1a:	e00c      	b.n	8000a36 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	689a      	ldr	r2, [r3, #8]
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000a2a:	609a      	str	r2, [r3, #8]
 8000a2c:	e003      	b.n	8000a36 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	2200      	movs	r2, #0
 8000a32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000a36:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	3710      	adds	r7, #16
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	40012800 	.word	0x40012800
 8000a44:	40012400 	.word	0x40012400

08000a48 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000a48:	b480      	push	{r7}
 8000a4a:	b085      	sub	sp, #20
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
 8000a50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a52:	2300      	movs	r3, #0
 8000a54:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000a56:	2300      	movs	r3, #0
 8000a58:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000a60:	2b01      	cmp	r3, #1
 8000a62:	d101      	bne.n	8000a68 <HAL_ADC_ConfigChannel+0x20>
 8000a64:	2302      	movs	r3, #2
 8000a66:	e0dc      	b.n	8000c22 <HAL_ADC_ConfigChannel+0x1da>
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	685b      	ldr	r3, [r3, #4]
 8000a74:	2b06      	cmp	r3, #6
 8000a76:	d81c      	bhi.n	8000ab2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	685a      	ldr	r2, [r3, #4]
 8000a82:	4613      	mov	r3, r2
 8000a84:	009b      	lsls	r3, r3, #2
 8000a86:	4413      	add	r3, r2
 8000a88:	3b05      	subs	r3, #5
 8000a8a:	221f      	movs	r2, #31
 8000a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a90:	43db      	mvns	r3, r3
 8000a92:	4019      	ands	r1, r3
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	6818      	ldr	r0, [r3, #0]
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	685a      	ldr	r2, [r3, #4]
 8000a9c:	4613      	mov	r3, r2
 8000a9e:	009b      	lsls	r3, r3, #2
 8000aa0:	4413      	add	r3, r2
 8000aa2:	3b05      	subs	r3, #5
 8000aa4:	fa00 f203 	lsl.w	r2, r0, r3
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	430a      	orrs	r2, r1
 8000aae:	635a      	str	r2, [r3, #52]	; 0x34
 8000ab0:	e03c      	b.n	8000b2c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	685b      	ldr	r3, [r3, #4]
 8000ab6:	2b0c      	cmp	r3, #12
 8000ab8:	d81c      	bhi.n	8000af4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	685a      	ldr	r2, [r3, #4]
 8000ac4:	4613      	mov	r3, r2
 8000ac6:	009b      	lsls	r3, r3, #2
 8000ac8:	4413      	add	r3, r2
 8000aca:	3b23      	subs	r3, #35	; 0x23
 8000acc:	221f      	movs	r2, #31
 8000ace:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad2:	43db      	mvns	r3, r3
 8000ad4:	4019      	ands	r1, r3
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	6818      	ldr	r0, [r3, #0]
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	685a      	ldr	r2, [r3, #4]
 8000ade:	4613      	mov	r3, r2
 8000ae0:	009b      	lsls	r3, r3, #2
 8000ae2:	4413      	add	r3, r2
 8000ae4:	3b23      	subs	r3, #35	; 0x23
 8000ae6:	fa00 f203 	lsl.w	r2, r0, r3
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	430a      	orrs	r2, r1
 8000af0:	631a      	str	r2, [r3, #48]	; 0x30
 8000af2:	e01b      	b.n	8000b2c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	685a      	ldr	r2, [r3, #4]
 8000afe:	4613      	mov	r3, r2
 8000b00:	009b      	lsls	r3, r3, #2
 8000b02:	4413      	add	r3, r2
 8000b04:	3b41      	subs	r3, #65	; 0x41
 8000b06:	221f      	movs	r2, #31
 8000b08:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0c:	43db      	mvns	r3, r3
 8000b0e:	4019      	ands	r1, r3
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	6818      	ldr	r0, [r3, #0]
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	685a      	ldr	r2, [r3, #4]
 8000b18:	4613      	mov	r3, r2
 8000b1a:	009b      	lsls	r3, r3, #2
 8000b1c:	4413      	add	r3, r2
 8000b1e:	3b41      	subs	r3, #65	; 0x41
 8000b20:	fa00 f203 	lsl.w	r2, r0, r3
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	430a      	orrs	r2, r1
 8000b2a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	2b09      	cmp	r3, #9
 8000b32:	d91c      	bls.n	8000b6e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	68d9      	ldr	r1, [r3, #12]
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	681a      	ldr	r2, [r3, #0]
 8000b3e:	4613      	mov	r3, r2
 8000b40:	005b      	lsls	r3, r3, #1
 8000b42:	4413      	add	r3, r2
 8000b44:	3b1e      	subs	r3, #30
 8000b46:	2207      	movs	r2, #7
 8000b48:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4c:	43db      	mvns	r3, r3
 8000b4e:	4019      	ands	r1, r3
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	6898      	ldr	r0, [r3, #8]
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	681a      	ldr	r2, [r3, #0]
 8000b58:	4613      	mov	r3, r2
 8000b5a:	005b      	lsls	r3, r3, #1
 8000b5c:	4413      	add	r3, r2
 8000b5e:	3b1e      	subs	r3, #30
 8000b60:	fa00 f203 	lsl.w	r2, r0, r3
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	430a      	orrs	r2, r1
 8000b6a:	60da      	str	r2, [r3, #12]
 8000b6c:	e019      	b.n	8000ba2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	6919      	ldr	r1, [r3, #16]
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	681a      	ldr	r2, [r3, #0]
 8000b78:	4613      	mov	r3, r2
 8000b7a:	005b      	lsls	r3, r3, #1
 8000b7c:	4413      	add	r3, r2
 8000b7e:	2207      	movs	r2, #7
 8000b80:	fa02 f303 	lsl.w	r3, r2, r3
 8000b84:	43db      	mvns	r3, r3
 8000b86:	4019      	ands	r1, r3
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	6898      	ldr	r0, [r3, #8]
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	681a      	ldr	r2, [r3, #0]
 8000b90:	4613      	mov	r3, r2
 8000b92:	005b      	lsls	r3, r3, #1
 8000b94:	4413      	add	r3, r2
 8000b96:	fa00 f203 	lsl.w	r2, r0, r3
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	430a      	orrs	r2, r1
 8000ba0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	2b10      	cmp	r3, #16
 8000ba8:	d003      	beq.n	8000bb2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000bae:	2b11      	cmp	r3, #17
 8000bb0:	d132      	bne.n	8000c18 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4a1d      	ldr	r2, [pc, #116]	; (8000c2c <HAL_ADC_ConfigChannel+0x1e4>)
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	d125      	bne.n	8000c08 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	689b      	ldr	r3, [r3, #8]
 8000bc2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d126      	bne.n	8000c18 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	689a      	ldr	r2, [r3, #8]
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000bd8:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	2b10      	cmp	r3, #16
 8000be0:	d11a      	bne.n	8000c18 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000be2:	4b13      	ldr	r3, [pc, #76]	; (8000c30 <HAL_ADC_ConfigChannel+0x1e8>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4a13      	ldr	r2, [pc, #76]	; (8000c34 <HAL_ADC_ConfigChannel+0x1ec>)
 8000be8:	fba2 2303 	umull	r2, r3, r2, r3
 8000bec:	0c9a      	lsrs	r2, r3, #18
 8000bee:	4613      	mov	r3, r2
 8000bf0:	009b      	lsls	r3, r3, #2
 8000bf2:	4413      	add	r3, r2
 8000bf4:	005b      	lsls	r3, r3, #1
 8000bf6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000bf8:	e002      	b.n	8000c00 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000bfa:	68bb      	ldr	r3, [r7, #8]
 8000bfc:	3b01      	subs	r3, #1
 8000bfe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d1f9      	bne.n	8000bfa <HAL_ADC_ConfigChannel+0x1b2>
 8000c06:	e007      	b.n	8000c18 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c0c:	f043 0220 	orr.w	r2, r3, #32
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000c14:	2301      	movs	r3, #1
 8000c16:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3714      	adds	r7, #20
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bc80      	pop	{r7}
 8000c2a:	4770      	bx	lr
 8000c2c:	40012400 	.word	0x40012400
 8000c30:	20000000 	.word	0x20000000
 8000c34:	431bde83 	.word	0x431bde83

08000c38 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b084      	sub	sp, #16
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000c40:	2300      	movs	r3, #0
 8000c42:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000c44:	2300      	movs	r3, #0
 8000c46:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	689b      	ldr	r3, [r3, #8]
 8000c4e:	f003 0301 	and.w	r3, r3, #1
 8000c52:	2b01      	cmp	r3, #1
 8000c54:	d039      	beq.n	8000cca <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	689a      	ldr	r2, [r3, #8]
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	f042 0201 	orr.w	r2, r2, #1
 8000c64:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000c66:	4b1b      	ldr	r3, [pc, #108]	; (8000cd4 <ADC_Enable+0x9c>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4a1b      	ldr	r2, [pc, #108]	; (8000cd8 <ADC_Enable+0xa0>)
 8000c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8000c70:	0c9b      	lsrs	r3, r3, #18
 8000c72:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000c74:	e002      	b.n	8000c7c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8000c76:	68bb      	ldr	r3, [r7, #8]
 8000c78:	3b01      	subs	r3, #1
 8000c7a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d1f9      	bne.n	8000c76 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000c82:	f7ff fd51 	bl	8000728 <HAL_GetTick>
 8000c86:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000c88:	e018      	b.n	8000cbc <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000c8a:	f7ff fd4d 	bl	8000728 <HAL_GetTick>
 8000c8e:	4602      	mov	r2, r0
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	1ad3      	subs	r3, r2, r3
 8000c94:	2b02      	cmp	r3, #2
 8000c96:	d911      	bls.n	8000cbc <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c9c:	f043 0210 	orr.w	r2, r3, #16
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ca8:	f043 0201 	orr.w	r2, r3, #1
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	e007      	b.n	8000ccc <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	689b      	ldr	r3, [r3, #8]
 8000cc2:	f003 0301 	and.w	r3, r3, #1
 8000cc6:	2b01      	cmp	r3, #1
 8000cc8:	d1df      	bne.n	8000c8a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000cca:	2300      	movs	r3, #0
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	3710      	adds	r7, #16
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	20000000 	.word	0x20000000
 8000cd8:	431bde83 	.word	0x431bde83

08000cdc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b084      	sub	sp, #16
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	689b      	ldr	r3, [r3, #8]
 8000cee:	f003 0301 	and.w	r3, r3, #1
 8000cf2:	2b01      	cmp	r3, #1
 8000cf4:	d127      	bne.n	8000d46 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	689a      	ldr	r2, [r3, #8]
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f022 0201 	bic.w	r2, r2, #1
 8000d04:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000d06:	f7ff fd0f 	bl	8000728 <HAL_GetTick>
 8000d0a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000d0c:	e014      	b.n	8000d38 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000d0e:	f7ff fd0b 	bl	8000728 <HAL_GetTick>
 8000d12:	4602      	mov	r2, r0
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	1ad3      	subs	r3, r2, r3
 8000d18:	2b02      	cmp	r3, #2
 8000d1a:	d90d      	bls.n	8000d38 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d20:	f043 0210 	orr.w	r2, r3, #16
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d2c:	f043 0201 	orr.w	r2, r3, #1
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8000d34:	2301      	movs	r3, #1
 8000d36:	e007      	b.n	8000d48 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	689b      	ldr	r3, [r3, #8]
 8000d3e:	f003 0301 	and.w	r3, r3, #1
 8000d42:	2b01      	cmp	r3, #1
 8000d44:	d0e3      	beq.n	8000d0e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000d46:	2300      	movs	r3, #0
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3710      	adds	r7, #16
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}

08000d50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b085      	sub	sp, #20
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	f003 0307 	and.w	r3, r3, #7
 8000d5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d60:	4b0c      	ldr	r3, [pc, #48]	; (8000d94 <__NVIC_SetPriorityGrouping+0x44>)
 8000d62:	68db      	ldr	r3, [r3, #12]
 8000d64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d66:	68ba      	ldr	r2, [r7, #8]
 8000d68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d82:	4a04      	ldr	r2, [pc, #16]	; (8000d94 <__NVIC_SetPriorityGrouping+0x44>)
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	60d3      	str	r3, [r2, #12]
}
 8000d88:	bf00      	nop
 8000d8a:	3714      	adds	r7, #20
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bc80      	pop	{r7}
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	e000ed00 	.word	0xe000ed00

08000d98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d9c:	4b04      	ldr	r3, [pc, #16]	; (8000db0 <__NVIC_GetPriorityGrouping+0x18>)
 8000d9e:	68db      	ldr	r3, [r3, #12]
 8000da0:	0a1b      	lsrs	r3, r3, #8
 8000da2:	f003 0307 	and.w	r3, r3, #7
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bc80      	pop	{r7}
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	e000ed00 	.word	0xe000ed00

08000db4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	4603      	mov	r3, r0
 8000dbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	db0b      	blt.n	8000dde <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dc6:	79fb      	ldrb	r3, [r7, #7]
 8000dc8:	f003 021f 	and.w	r2, r3, #31
 8000dcc:	4906      	ldr	r1, [pc, #24]	; (8000de8 <__NVIC_EnableIRQ+0x34>)
 8000dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd2:	095b      	lsrs	r3, r3, #5
 8000dd4:	2001      	movs	r0, #1
 8000dd6:	fa00 f202 	lsl.w	r2, r0, r2
 8000dda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dde:	bf00      	nop
 8000de0:	370c      	adds	r7, #12
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bc80      	pop	{r7}
 8000de6:	4770      	bx	lr
 8000de8:	e000e100 	.word	0xe000e100

08000dec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	4603      	mov	r3, r0
 8000df4:	6039      	str	r1, [r7, #0]
 8000df6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000df8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	db0a      	blt.n	8000e16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	b2da      	uxtb	r2, r3
 8000e04:	490c      	ldr	r1, [pc, #48]	; (8000e38 <__NVIC_SetPriority+0x4c>)
 8000e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0a:	0112      	lsls	r2, r2, #4
 8000e0c:	b2d2      	uxtb	r2, r2
 8000e0e:	440b      	add	r3, r1
 8000e10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e14:	e00a      	b.n	8000e2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	b2da      	uxtb	r2, r3
 8000e1a:	4908      	ldr	r1, [pc, #32]	; (8000e3c <__NVIC_SetPriority+0x50>)
 8000e1c:	79fb      	ldrb	r3, [r7, #7]
 8000e1e:	f003 030f 	and.w	r3, r3, #15
 8000e22:	3b04      	subs	r3, #4
 8000e24:	0112      	lsls	r2, r2, #4
 8000e26:	b2d2      	uxtb	r2, r2
 8000e28:	440b      	add	r3, r1
 8000e2a:	761a      	strb	r2, [r3, #24]
}
 8000e2c:	bf00      	nop
 8000e2e:	370c      	adds	r7, #12
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bc80      	pop	{r7}
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	e000e100 	.word	0xe000e100
 8000e3c:	e000ed00 	.word	0xe000ed00

08000e40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b089      	sub	sp, #36	; 0x24
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	60f8      	str	r0, [r7, #12]
 8000e48:	60b9      	str	r1, [r7, #8]
 8000e4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	f003 0307 	and.w	r3, r3, #7
 8000e52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e54:	69fb      	ldr	r3, [r7, #28]
 8000e56:	f1c3 0307 	rsb	r3, r3, #7
 8000e5a:	2b04      	cmp	r3, #4
 8000e5c:	bf28      	it	cs
 8000e5e:	2304      	movcs	r3, #4
 8000e60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	3304      	adds	r3, #4
 8000e66:	2b06      	cmp	r3, #6
 8000e68:	d902      	bls.n	8000e70 <NVIC_EncodePriority+0x30>
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	3b03      	subs	r3, #3
 8000e6e:	e000      	b.n	8000e72 <NVIC_EncodePriority+0x32>
 8000e70:	2300      	movs	r3, #0
 8000e72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e74:	f04f 32ff 	mov.w	r2, #4294967295
 8000e78:	69bb      	ldr	r3, [r7, #24]
 8000e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7e:	43da      	mvns	r2, r3
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	401a      	ands	r2, r3
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e88:	f04f 31ff 	mov.w	r1, #4294967295
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e92:	43d9      	mvns	r1, r3
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e98:	4313      	orrs	r3, r2
         );
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3724      	adds	r7, #36	; 0x24
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bc80      	pop	{r7}
 8000ea2:	4770      	bx	lr

08000ea4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	3b01      	subs	r3, #1
 8000eb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000eb4:	d301      	bcc.n	8000eba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	e00f      	b.n	8000eda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eba:	4a0a      	ldr	r2, [pc, #40]	; (8000ee4 <SysTick_Config+0x40>)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	3b01      	subs	r3, #1
 8000ec0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ec2:	210f      	movs	r1, #15
 8000ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ec8:	f7ff ff90 	bl	8000dec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ecc:	4b05      	ldr	r3, [pc, #20]	; (8000ee4 <SysTick_Config+0x40>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ed2:	4b04      	ldr	r3, [pc, #16]	; (8000ee4 <SysTick_Config+0x40>)
 8000ed4:	2207      	movs	r2, #7
 8000ed6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ed8:	2300      	movs	r3, #0
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	e000e010 	.word	0xe000e010

08000ee8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ef0:	6878      	ldr	r0, [r7, #4]
 8000ef2:	f7ff ff2d 	bl	8000d50 <__NVIC_SetPriorityGrouping>
}
 8000ef6:	bf00      	nop
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}

08000efe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000efe:	b580      	push	{r7, lr}
 8000f00:	b086      	sub	sp, #24
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	4603      	mov	r3, r0
 8000f06:	60b9      	str	r1, [r7, #8]
 8000f08:	607a      	str	r2, [r7, #4]
 8000f0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f10:	f7ff ff42 	bl	8000d98 <__NVIC_GetPriorityGrouping>
 8000f14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f16:	687a      	ldr	r2, [r7, #4]
 8000f18:	68b9      	ldr	r1, [r7, #8]
 8000f1a:	6978      	ldr	r0, [r7, #20]
 8000f1c:	f7ff ff90 	bl	8000e40 <NVIC_EncodePriority>
 8000f20:	4602      	mov	r2, r0
 8000f22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f26:	4611      	mov	r1, r2
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f7ff ff5f 	bl	8000dec <__NVIC_SetPriority>
}
 8000f2e:	bf00      	nop
 8000f30:	3718      	adds	r7, #24
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}

08000f36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f36:	b580      	push	{r7, lr}
 8000f38:	b082      	sub	sp, #8
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff ff35 	bl	8000db4 <__NVIC_EnableIRQ>
}
 8000f4a:	bf00      	nop
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}

08000f52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f52:	b580      	push	{r7, lr}
 8000f54:	b082      	sub	sp, #8
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	f7ff ffa2 	bl	8000ea4 <SysTick_Config>
 8000f60:	4603      	mov	r3, r0
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
	...

08000f6c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b085      	sub	sp, #20
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000f74:	2300      	movs	r3, #0
 8000f76:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d101      	bne.n	8000f82 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e043      	b.n	800100a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	461a      	mov	r2, r3
 8000f88:	4b22      	ldr	r3, [pc, #136]	; (8001014 <HAL_DMA_Init+0xa8>)
 8000f8a:	4413      	add	r3, r2
 8000f8c:	4a22      	ldr	r2, [pc, #136]	; (8001018 <HAL_DMA_Init+0xac>)
 8000f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f92:	091b      	lsrs	r3, r3, #4
 8000f94:	009a      	lsls	r2, r3, #2
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4a1f      	ldr	r2, [pc, #124]	; (800101c <HAL_DMA_Init+0xb0>)
 8000f9e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2202      	movs	r2, #2
 8000fa4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000fb6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000fba:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000fc4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	68db      	ldr	r3, [r3, #12]
 8000fca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fd0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	695b      	ldr	r3, [r3, #20]
 8000fd6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fdc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	69db      	ldr	r3, [r3, #28]
 8000fe2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000fe4:	68fa      	ldr	r2, [r7, #12]
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	68fa      	ldr	r2, [r7, #12]
 8000ff0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2200      	movs	r2, #0
 8001004:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001008:	2300      	movs	r3, #0
}
 800100a:	4618      	mov	r0, r3
 800100c:	3714      	adds	r7, #20
 800100e:	46bd      	mov	sp, r7
 8001010:	bc80      	pop	{r7}
 8001012:	4770      	bx	lr
 8001014:	bffdfff8 	.word	0xbffdfff8
 8001018:	cccccccd 	.word	0xcccccccd
 800101c:	40020000 	.word	0x40020000

08001020 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001028:	2300      	movs	r3, #0
 800102a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001032:	2b02      	cmp	r3, #2
 8001034:	d005      	beq.n	8001042 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2204      	movs	r2, #4
 800103a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800103c:	2301      	movs	r3, #1
 800103e:	73fb      	strb	r3, [r7, #15]
 8001040:	e051      	b.n	80010e6 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f022 020e 	bic.w	r2, r2, #14
 8001050:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f022 0201 	bic.w	r2, r2, #1
 8001060:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4a22      	ldr	r2, [pc, #136]	; (80010f0 <HAL_DMA_Abort_IT+0xd0>)
 8001068:	4293      	cmp	r3, r2
 800106a:	d029      	beq.n	80010c0 <HAL_DMA_Abort_IT+0xa0>
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a20      	ldr	r2, [pc, #128]	; (80010f4 <HAL_DMA_Abort_IT+0xd4>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d022      	beq.n	80010bc <HAL_DMA_Abort_IT+0x9c>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a1f      	ldr	r2, [pc, #124]	; (80010f8 <HAL_DMA_Abort_IT+0xd8>)
 800107c:	4293      	cmp	r3, r2
 800107e:	d01a      	beq.n	80010b6 <HAL_DMA_Abort_IT+0x96>
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a1d      	ldr	r2, [pc, #116]	; (80010fc <HAL_DMA_Abort_IT+0xdc>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d012      	beq.n	80010b0 <HAL_DMA_Abort_IT+0x90>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4a1c      	ldr	r2, [pc, #112]	; (8001100 <HAL_DMA_Abort_IT+0xe0>)
 8001090:	4293      	cmp	r3, r2
 8001092:	d00a      	beq.n	80010aa <HAL_DMA_Abort_IT+0x8a>
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a1a      	ldr	r2, [pc, #104]	; (8001104 <HAL_DMA_Abort_IT+0xe4>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d102      	bne.n	80010a4 <HAL_DMA_Abort_IT+0x84>
 800109e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80010a2:	e00e      	b.n	80010c2 <HAL_DMA_Abort_IT+0xa2>
 80010a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80010a8:	e00b      	b.n	80010c2 <HAL_DMA_Abort_IT+0xa2>
 80010aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010ae:	e008      	b.n	80010c2 <HAL_DMA_Abort_IT+0xa2>
 80010b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010b4:	e005      	b.n	80010c2 <HAL_DMA_Abort_IT+0xa2>
 80010b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010ba:	e002      	b.n	80010c2 <HAL_DMA_Abort_IT+0xa2>
 80010bc:	2310      	movs	r3, #16
 80010be:	e000      	b.n	80010c2 <HAL_DMA_Abort_IT+0xa2>
 80010c0:	2301      	movs	r3, #1
 80010c2:	4a11      	ldr	r2, [pc, #68]	; (8001108 <HAL_DMA_Abort_IT+0xe8>)
 80010c4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2201      	movs	r2, #1
 80010ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2200      	movs	r2, #0
 80010d2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d003      	beq.n	80010e6 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010e2:	6878      	ldr	r0, [r7, #4]
 80010e4:	4798      	blx	r3
    } 
  }
  return status;
 80010e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3710      	adds	r7, #16
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	40020008 	.word	0x40020008
 80010f4:	4002001c 	.word	0x4002001c
 80010f8:	40020030 	.word	0x40020030
 80010fc:	40020044 	.word	0x40020044
 8001100:	40020058 	.word	0x40020058
 8001104:	4002006c 	.word	0x4002006c
 8001108:	40020000 	.word	0x40020000

0800110c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001128:	2204      	movs	r2, #4
 800112a:	409a      	lsls	r2, r3
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	4013      	ands	r3, r2
 8001130:	2b00      	cmp	r3, #0
 8001132:	d04f      	beq.n	80011d4 <HAL_DMA_IRQHandler+0xc8>
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	f003 0304 	and.w	r3, r3, #4
 800113a:	2b00      	cmp	r3, #0
 800113c:	d04a      	beq.n	80011d4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f003 0320 	and.w	r3, r3, #32
 8001148:	2b00      	cmp	r3, #0
 800114a:	d107      	bne.n	800115c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f022 0204 	bic.w	r2, r2, #4
 800115a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a66      	ldr	r2, [pc, #408]	; (80012fc <HAL_DMA_IRQHandler+0x1f0>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d029      	beq.n	80011ba <HAL_DMA_IRQHandler+0xae>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a65      	ldr	r2, [pc, #404]	; (8001300 <HAL_DMA_IRQHandler+0x1f4>)
 800116c:	4293      	cmp	r3, r2
 800116e:	d022      	beq.n	80011b6 <HAL_DMA_IRQHandler+0xaa>
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a63      	ldr	r2, [pc, #396]	; (8001304 <HAL_DMA_IRQHandler+0x1f8>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d01a      	beq.n	80011b0 <HAL_DMA_IRQHandler+0xa4>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a62      	ldr	r2, [pc, #392]	; (8001308 <HAL_DMA_IRQHandler+0x1fc>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d012      	beq.n	80011aa <HAL_DMA_IRQHandler+0x9e>
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a60      	ldr	r2, [pc, #384]	; (800130c <HAL_DMA_IRQHandler+0x200>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d00a      	beq.n	80011a4 <HAL_DMA_IRQHandler+0x98>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a5f      	ldr	r2, [pc, #380]	; (8001310 <HAL_DMA_IRQHandler+0x204>)
 8001194:	4293      	cmp	r3, r2
 8001196:	d102      	bne.n	800119e <HAL_DMA_IRQHandler+0x92>
 8001198:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800119c:	e00e      	b.n	80011bc <HAL_DMA_IRQHandler+0xb0>
 800119e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80011a2:	e00b      	b.n	80011bc <HAL_DMA_IRQHandler+0xb0>
 80011a4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80011a8:	e008      	b.n	80011bc <HAL_DMA_IRQHandler+0xb0>
 80011aa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80011ae:	e005      	b.n	80011bc <HAL_DMA_IRQHandler+0xb0>
 80011b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011b4:	e002      	b.n	80011bc <HAL_DMA_IRQHandler+0xb0>
 80011b6:	2340      	movs	r3, #64	; 0x40
 80011b8:	e000      	b.n	80011bc <HAL_DMA_IRQHandler+0xb0>
 80011ba:	2304      	movs	r3, #4
 80011bc:	4a55      	ldr	r2, [pc, #340]	; (8001314 <HAL_DMA_IRQHandler+0x208>)
 80011be:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	f000 8094 	beq.w	80012f2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011ce:	6878      	ldr	r0, [r7, #4]
 80011d0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80011d2:	e08e      	b.n	80012f2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d8:	2202      	movs	r2, #2
 80011da:	409a      	lsls	r2, r3
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	4013      	ands	r3, r2
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d056      	beq.n	8001292 <HAL_DMA_IRQHandler+0x186>
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	f003 0302 	and.w	r3, r3, #2
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d051      	beq.n	8001292 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f003 0320 	and.w	r3, r3, #32
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d10b      	bne.n	8001214 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f022 020a 	bic.w	r2, r2, #10
 800120a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2201      	movs	r2, #1
 8001210:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a38      	ldr	r2, [pc, #224]	; (80012fc <HAL_DMA_IRQHandler+0x1f0>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d029      	beq.n	8001272 <HAL_DMA_IRQHandler+0x166>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a37      	ldr	r2, [pc, #220]	; (8001300 <HAL_DMA_IRQHandler+0x1f4>)
 8001224:	4293      	cmp	r3, r2
 8001226:	d022      	beq.n	800126e <HAL_DMA_IRQHandler+0x162>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a35      	ldr	r2, [pc, #212]	; (8001304 <HAL_DMA_IRQHandler+0x1f8>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d01a      	beq.n	8001268 <HAL_DMA_IRQHandler+0x15c>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4a34      	ldr	r2, [pc, #208]	; (8001308 <HAL_DMA_IRQHandler+0x1fc>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d012      	beq.n	8001262 <HAL_DMA_IRQHandler+0x156>
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a32      	ldr	r2, [pc, #200]	; (800130c <HAL_DMA_IRQHandler+0x200>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d00a      	beq.n	800125c <HAL_DMA_IRQHandler+0x150>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a31      	ldr	r2, [pc, #196]	; (8001310 <HAL_DMA_IRQHandler+0x204>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d102      	bne.n	8001256 <HAL_DMA_IRQHandler+0x14a>
 8001250:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001254:	e00e      	b.n	8001274 <HAL_DMA_IRQHandler+0x168>
 8001256:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800125a:	e00b      	b.n	8001274 <HAL_DMA_IRQHandler+0x168>
 800125c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001260:	e008      	b.n	8001274 <HAL_DMA_IRQHandler+0x168>
 8001262:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001266:	e005      	b.n	8001274 <HAL_DMA_IRQHandler+0x168>
 8001268:	f44f 7300 	mov.w	r3, #512	; 0x200
 800126c:	e002      	b.n	8001274 <HAL_DMA_IRQHandler+0x168>
 800126e:	2320      	movs	r3, #32
 8001270:	e000      	b.n	8001274 <HAL_DMA_IRQHandler+0x168>
 8001272:	2302      	movs	r3, #2
 8001274:	4a27      	ldr	r2, [pc, #156]	; (8001314 <HAL_DMA_IRQHandler+0x208>)
 8001276:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2200      	movs	r2, #0
 800127c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001284:	2b00      	cmp	r3, #0
 8001286:	d034      	beq.n	80012f2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001290:	e02f      	b.n	80012f2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001296:	2208      	movs	r2, #8
 8001298:	409a      	lsls	r2, r3
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	4013      	ands	r3, r2
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d028      	beq.n	80012f4 <HAL_DMA_IRQHandler+0x1e8>
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	f003 0308 	and.w	r3, r3, #8
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d023      	beq.n	80012f4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f022 020e 	bic.w	r2, r2, #14
 80012ba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012c4:	2101      	movs	r1, #1
 80012c6:	fa01 f202 	lsl.w	r2, r1, r2
 80012ca:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2201      	movs	r2, #1
 80012d0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2201      	movs	r2, #1
 80012d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2200      	movs	r2, #0
 80012de:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d004      	beq.n	80012f4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	4798      	blx	r3
    }
  }
  return;
 80012f2:	bf00      	nop
 80012f4:	bf00      	nop
}
 80012f6:	3710      	adds	r7, #16
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	40020008 	.word	0x40020008
 8001300:	4002001c 	.word	0x4002001c
 8001304:	40020030 	.word	0x40020030
 8001308:	40020044 	.word	0x40020044
 800130c:	40020058 	.word	0x40020058
 8001310:	4002006c 	.word	0x4002006c
 8001314:	40020000 	.word	0x40020000

08001318 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001318:	b480      	push	{r7}
 800131a:	b08b      	sub	sp, #44	; 0x2c
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001322:	2300      	movs	r3, #0
 8001324:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001326:	2300      	movs	r3, #0
 8001328:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800132a:	e127      	b.n	800157c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800132c:	2201      	movs	r2, #1
 800132e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001330:	fa02 f303 	lsl.w	r3, r2, r3
 8001334:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	69fa      	ldr	r2, [r7, #28]
 800133c:	4013      	ands	r3, r2
 800133e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	429a      	cmp	r2, r3
 8001346:	f040 8116 	bne.w	8001576 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	2b12      	cmp	r3, #18
 8001350:	d034      	beq.n	80013bc <HAL_GPIO_Init+0xa4>
 8001352:	2b12      	cmp	r3, #18
 8001354:	d80d      	bhi.n	8001372 <HAL_GPIO_Init+0x5a>
 8001356:	2b02      	cmp	r3, #2
 8001358:	d02b      	beq.n	80013b2 <HAL_GPIO_Init+0x9a>
 800135a:	2b02      	cmp	r3, #2
 800135c:	d804      	bhi.n	8001368 <HAL_GPIO_Init+0x50>
 800135e:	2b00      	cmp	r3, #0
 8001360:	d031      	beq.n	80013c6 <HAL_GPIO_Init+0xae>
 8001362:	2b01      	cmp	r3, #1
 8001364:	d01c      	beq.n	80013a0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001366:	e048      	b.n	80013fa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001368:	2b03      	cmp	r3, #3
 800136a:	d043      	beq.n	80013f4 <HAL_GPIO_Init+0xdc>
 800136c:	2b11      	cmp	r3, #17
 800136e:	d01b      	beq.n	80013a8 <HAL_GPIO_Init+0x90>
          break;
 8001370:	e043      	b.n	80013fa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001372:	4a89      	ldr	r2, [pc, #548]	; (8001598 <HAL_GPIO_Init+0x280>)
 8001374:	4293      	cmp	r3, r2
 8001376:	d026      	beq.n	80013c6 <HAL_GPIO_Init+0xae>
 8001378:	4a87      	ldr	r2, [pc, #540]	; (8001598 <HAL_GPIO_Init+0x280>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d806      	bhi.n	800138c <HAL_GPIO_Init+0x74>
 800137e:	4a87      	ldr	r2, [pc, #540]	; (800159c <HAL_GPIO_Init+0x284>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d020      	beq.n	80013c6 <HAL_GPIO_Init+0xae>
 8001384:	4a86      	ldr	r2, [pc, #536]	; (80015a0 <HAL_GPIO_Init+0x288>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d01d      	beq.n	80013c6 <HAL_GPIO_Init+0xae>
          break;
 800138a:	e036      	b.n	80013fa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800138c:	4a85      	ldr	r2, [pc, #532]	; (80015a4 <HAL_GPIO_Init+0x28c>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d019      	beq.n	80013c6 <HAL_GPIO_Init+0xae>
 8001392:	4a85      	ldr	r2, [pc, #532]	; (80015a8 <HAL_GPIO_Init+0x290>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d016      	beq.n	80013c6 <HAL_GPIO_Init+0xae>
 8001398:	4a84      	ldr	r2, [pc, #528]	; (80015ac <HAL_GPIO_Init+0x294>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d013      	beq.n	80013c6 <HAL_GPIO_Init+0xae>
          break;
 800139e:	e02c      	b.n	80013fa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	623b      	str	r3, [r7, #32]
          break;
 80013a6:	e028      	b.n	80013fa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	3304      	adds	r3, #4
 80013ae:	623b      	str	r3, [r7, #32]
          break;
 80013b0:	e023      	b.n	80013fa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	68db      	ldr	r3, [r3, #12]
 80013b6:	3308      	adds	r3, #8
 80013b8:	623b      	str	r3, [r7, #32]
          break;
 80013ba:	e01e      	b.n	80013fa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	330c      	adds	r3, #12
 80013c2:	623b      	str	r3, [r7, #32]
          break;
 80013c4:	e019      	b.n	80013fa <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d102      	bne.n	80013d4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80013ce:	2304      	movs	r3, #4
 80013d0:	623b      	str	r3, [r7, #32]
          break;
 80013d2:	e012      	b.n	80013fa <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d105      	bne.n	80013e8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013dc:	2308      	movs	r3, #8
 80013de:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	69fa      	ldr	r2, [r7, #28]
 80013e4:	611a      	str	r2, [r3, #16]
          break;
 80013e6:	e008      	b.n	80013fa <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013e8:	2308      	movs	r3, #8
 80013ea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	69fa      	ldr	r2, [r7, #28]
 80013f0:	615a      	str	r2, [r3, #20]
          break;
 80013f2:	e002      	b.n	80013fa <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80013f4:	2300      	movs	r3, #0
 80013f6:	623b      	str	r3, [r7, #32]
          break;
 80013f8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80013fa:	69bb      	ldr	r3, [r7, #24]
 80013fc:	2bff      	cmp	r3, #255	; 0xff
 80013fe:	d801      	bhi.n	8001404 <HAL_GPIO_Init+0xec>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	e001      	b.n	8001408 <HAL_GPIO_Init+0xf0>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	3304      	adds	r3, #4
 8001408:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800140a:	69bb      	ldr	r3, [r7, #24]
 800140c:	2bff      	cmp	r3, #255	; 0xff
 800140e:	d802      	bhi.n	8001416 <HAL_GPIO_Init+0xfe>
 8001410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	e002      	b.n	800141c <HAL_GPIO_Init+0x104>
 8001416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001418:	3b08      	subs	r3, #8
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	210f      	movs	r1, #15
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	fa01 f303 	lsl.w	r3, r1, r3
 800142a:	43db      	mvns	r3, r3
 800142c:	401a      	ands	r2, r3
 800142e:	6a39      	ldr	r1, [r7, #32]
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	fa01 f303 	lsl.w	r3, r1, r3
 8001436:	431a      	orrs	r2, r3
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001444:	2b00      	cmp	r3, #0
 8001446:	f000 8096 	beq.w	8001576 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800144a:	4b59      	ldr	r3, [pc, #356]	; (80015b0 <HAL_GPIO_Init+0x298>)
 800144c:	699b      	ldr	r3, [r3, #24]
 800144e:	4a58      	ldr	r2, [pc, #352]	; (80015b0 <HAL_GPIO_Init+0x298>)
 8001450:	f043 0301 	orr.w	r3, r3, #1
 8001454:	6193      	str	r3, [r2, #24]
 8001456:	4b56      	ldr	r3, [pc, #344]	; (80015b0 <HAL_GPIO_Init+0x298>)
 8001458:	699b      	ldr	r3, [r3, #24]
 800145a:	f003 0301 	and.w	r3, r3, #1
 800145e:	60bb      	str	r3, [r7, #8]
 8001460:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001462:	4a54      	ldr	r2, [pc, #336]	; (80015b4 <HAL_GPIO_Init+0x29c>)
 8001464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001466:	089b      	lsrs	r3, r3, #2
 8001468:	3302      	adds	r3, #2
 800146a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800146e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001472:	f003 0303 	and.w	r3, r3, #3
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	220f      	movs	r2, #15
 800147a:	fa02 f303 	lsl.w	r3, r2, r3
 800147e:	43db      	mvns	r3, r3
 8001480:	68fa      	ldr	r2, [r7, #12]
 8001482:	4013      	ands	r3, r2
 8001484:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4a4b      	ldr	r2, [pc, #300]	; (80015b8 <HAL_GPIO_Init+0x2a0>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d013      	beq.n	80014b6 <HAL_GPIO_Init+0x19e>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4a4a      	ldr	r2, [pc, #296]	; (80015bc <HAL_GPIO_Init+0x2a4>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d00d      	beq.n	80014b2 <HAL_GPIO_Init+0x19a>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4a49      	ldr	r2, [pc, #292]	; (80015c0 <HAL_GPIO_Init+0x2a8>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d007      	beq.n	80014ae <HAL_GPIO_Init+0x196>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4a48      	ldr	r2, [pc, #288]	; (80015c4 <HAL_GPIO_Init+0x2ac>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d101      	bne.n	80014aa <HAL_GPIO_Init+0x192>
 80014a6:	2303      	movs	r3, #3
 80014a8:	e006      	b.n	80014b8 <HAL_GPIO_Init+0x1a0>
 80014aa:	2304      	movs	r3, #4
 80014ac:	e004      	b.n	80014b8 <HAL_GPIO_Init+0x1a0>
 80014ae:	2302      	movs	r3, #2
 80014b0:	e002      	b.n	80014b8 <HAL_GPIO_Init+0x1a0>
 80014b2:	2301      	movs	r3, #1
 80014b4:	e000      	b.n	80014b8 <HAL_GPIO_Init+0x1a0>
 80014b6:	2300      	movs	r3, #0
 80014b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014ba:	f002 0203 	and.w	r2, r2, #3
 80014be:	0092      	lsls	r2, r2, #2
 80014c0:	4093      	lsls	r3, r2
 80014c2:	68fa      	ldr	r2, [r7, #12]
 80014c4:	4313      	orrs	r3, r2
 80014c6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80014c8:	493a      	ldr	r1, [pc, #232]	; (80015b4 <HAL_GPIO_Init+0x29c>)
 80014ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014cc:	089b      	lsrs	r3, r3, #2
 80014ce:	3302      	adds	r3, #2
 80014d0:	68fa      	ldr	r2, [r7, #12]
 80014d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d006      	beq.n	80014f0 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80014e2:	4b39      	ldr	r3, [pc, #228]	; (80015c8 <HAL_GPIO_Init+0x2b0>)
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	4938      	ldr	r1, [pc, #224]	; (80015c8 <HAL_GPIO_Init+0x2b0>)
 80014e8:	69bb      	ldr	r3, [r7, #24]
 80014ea:	4313      	orrs	r3, r2
 80014ec:	600b      	str	r3, [r1, #0]
 80014ee:	e006      	b.n	80014fe <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80014f0:	4b35      	ldr	r3, [pc, #212]	; (80015c8 <HAL_GPIO_Init+0x2b0>)
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	69bb      	ldr	r3, [r7, #24]
 80014f6:	43db      	mvns	r3, r3
 80014f8:	4933      	ldr	r1, [pc, #204]	; (80015c8 <HAL_GPIO_Init+0x2b0>)
 80014fa:	4013      	ands	r3, r2
 80014fc:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d006      	beq.n	8001518 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800150a:	4b2f      	ldr	r3, [pc, #188]	; (80015c8 <HAL_GPIO_Init+0x2b0>)
 800150c:	685a      	ldr	r2, [r3, #4]
 800150e:	492e      	ldr	r1, [pc, #184]	; (80015c8 <HAL_GPIO_Init+0x2b0>)
 8001510:	69bb      	ldr	r3, [r7, #24]
 8001512:	4313      	orrs	r3, r2
 8001514:	604b      	str	r3, [r1, #4]
 8001516:	e006      	b.n	8001526 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001518:	4b2b      	ldr	r3, [pc, #172]	; (80015c8 <HAL_GPIO_Init+0x2b0>)
 800151a:	685a      	ldr	r2, [r3, #4]
 800151c:	69bb      	ldr	r3, [r7, #24]
 800151e:	43db      	mvns	r3, r3
 8001520:	4929      	ldr	r1, [pc, #164]	; (80015c8 <HAL_GPIO_Init+0x2b0>)
 8001522:	4013      	ands	r3, r2
 8001524:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800152e:	2b00      	cmp	r3, #0
 8001530:	d006      	beq.n	8001540 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001532:	4b25      	ldr	r3, [pc, #148]	; (80015c8 <HAL_GPIO_Init+0x2b0>)
 8001534:	689a      	ldr	r2, [r3, #8]
 8001536:	4924      	ldr	r1, [pc, #144]	; (80015c8 <HAL_GPIO_Init+0x2b0>)
 8001538:	69bb      	ldr	r3, [r7, #24]
 800153a:	4313      	orrs	r3, r2
 800153c:	608b      	str	r3, [r1, #8]
 800153e:	e006      	b.n	800154e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001540:	4b21      	ldr	r3, [pc, #132]	; (80015c8 <HAL_GPIO_Init+0x2b0>)
 8001542:	689a      	ldr	r2, [r3, #8]
 8001544:	69bb      	ldr	r3, [r7, #24]
 8001546:	43db      	mvns	r3, r3
 8001548:	491f      	ldr	r1, [pc, #124]	; (80015c8 <HAL_GPIO_Init+0x2b0>)
 800154a:	4013      	ands	r3, r2
 800154c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001556:	2b00      	cmp	r3, #0
 8001558:	d006      	beq.n	8001568 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800155a:	4b1b      	ldr	r3, [pc, #108]	; (80015c8 <HAL_GPIO_Init+0x2b0>)
 800155c:	68da      	ldr	r2, [r3, #12]
 800155e:	491a      	ldr	r1, [pc, #104]	; (80015c8 <HAL_GPIO_Init+0x2b0>)
 8001560:	69bb      	ldr	r3, [r7, #24]
 8001562:	4313      	orrs	r3, r2
 8001564:	60cb      	str	r3, [r1, #12]
 8001566:	e006      	b.n	8001576 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001568:	4b17      	ldr	r3, [pc, #92]	; (80015c8 <HAL_GPIO_Init+0x2b0>)
 800156a:	68da      	ldr	r2, [r3, #12]
 800156c:	69bb      	ldr	r3, [r7, #24]
 800156e:	43db      	mvns	r3, r3
 8001570:	4915      	ldr	r1, [pc, #84]	; (80015c8 <HAL_GPIO_Init+0x2b0>)
 8001572:	4013      	ands	r3, r2
 8001574:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001578:	3301      	adds	r3, #1
 800157a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001582:	fa22 f303 	lsr.w	r3, r2, r3
 8001586:	2b00      	cmp	r3, #0
 8001588:	f47f aed0 	bne.w	800132c <HAL_GPIO_Init+0x14>
  }
}
 800158c:	bf00      	nop
 800158e:	372c      	adds	r7, #44	; 0x2c
 8001590:	46bd      	mov	sp, r7
 8001592:	bc80      	pop	{r7}
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	10210000 	.word	0x10210000
 800159c:	10110000 	.word	0x10110000
 80015a0:	10120000 	.word	0x10120000
 80015a4:	10310000 	.word	0x10310000
 80015a8:	10320000 	.word	0x10320000
 80015ac:	10220000 	.word	0x10220000
 80015b0:	40021000 	.word	0x40021000
 80015b4:	40010000 	.word	0x40010000
 80015b8:	40010800 	.word	0x40010800
 80015bc:	40010c00 	.word	0x40010c00
 80015c0:	40011000 	.word	0x40011000
 80015c4:	40011400 	.word	0x40011400
 80015c8:	40010400 	.word	0x40010400

080015cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b086      	sub	sp, #24
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d101      	bne.n	80015de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e26c      	b.n	8001ab8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 0301 	and.w	r3, r3, #1
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	f000 8087 	beq.w	80016fa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80015ec:	4b92      	ldr	r3, [pc, #584]	; (8001838 <HAL_RCC_OscConfig+0x26c>)
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f003 030c 	and.w	r3, r3, #12
 80015f4:	2b04      	cmp	r3, #4
 80015f6:	d00c      	beq.n	8001612 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80015f8:	4b8f      	ldr	r3, [pc, #572]	; (8001838 <HAL_RCC_OscConfig+0x26c>)
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f003 030c 	and.w	r3, r3, #12
 8001600:	2b08      	cmp	r3, #8
 8001602:	d112      	bne.n	800162a <HAL_RCC_OscConfig+0x5e>
 8001604:	4b8c      	ldr	r3, [pc, #560]	; (8001838 <HAL_RCC_OscConfig+0x26c>)
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800160c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001610:	d10b      	bne.n	800162a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001612:	4b89      	ldr	r3, [pc, #548]	; (8001838 <HAL_RCC_OscConfig+0x26c>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d06c      	beq.n	80016f8 <HAL_RCC_OscConfig+0x12c>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d168      	bne.n	80016f8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e246      	b.n	8001ab8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001632:	d106      	bne.n	8001642 <HAL_RCC_OscConfig+0x76>
 8001634:	4b80      	ldr	r3, [pc, #512]	; (8001838 <HAL_RCC_OscConfig+0x26c>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a7f      	ldr	r2, [pc, #508]	; (8001838 <HAL_RCC_OscConfig+0x26c>)
 800163a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800163e:	6013      	str	r3, [r2, #0]
 8001640:	e02e      	b.n	80016a0 <HAL_RCC_OscConfig+0xd4>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d10c      	bne.n	8001664 <HAL_RCC_OscConfig+0x98>
 800164a:	4b7b      	ldr	r3, [pc, #492]	; (8001838 <HAL_RCC_OscConfig+0x26c>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a7a      	ldr	r2, [pc, #488]	; (8001838 <HAL_RCC_OscConfig+0x26c>)
 8001650:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001654:	6013      	str	r3, [r2, #0]
 8001656:	4b78      	ldr	r3, [pc, #480]	; (8001838 <HAL_RCC_OscConfig+0x26c>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a77      	ldr	r2, [pc, #476]	; (8001838 <HAL_RCC_OscConfig+0x26c>)
 800165c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001660:	6013      	str	r3, [r2, #0]
 8001662:	e01d      	b.n	80016a0 <HAL_RCC_OscConfig+0xd4>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800166c:	d10c      	bne.n	8001688 <HAL_RCC_OscConfig+0xbc>
 800166e:	4b72      	ldr	r3, [pc, #456]	; (8001838 <HAL_RCC_OscConfig+0x26c>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a71      	ldr	r2, [pc, #452]	; (8001838 <HAL_RCC_OscConfig+0x26c>)
 8001674:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001678:	6013      	str	r3, [r2, #0]
 800167a:	4b6f      	ldr	r3, [pc, #444]	; (8001838 <HAL_RCC_OscConfig+0x26c>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a6e      	ldr	r2, [pc, #440]	; (8001838 <HAL_RCC_OscConfig+0x26c>)
 8001680:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001684:	6013      	str	r3, [r2, #0]
 8001686:	e00b      	b.n	80016a0 <HAL_RCC_OscConfig+0xd4>
 8001688:	4b6b      	ldr	r3, [pc, #428]	; (8001838 <HAL_RCC_OscConfig+0x26c>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a6a      	ldr	r2, [pc, #424]	; (8001838 <HAL_RCC_OscConfig+0x26c>)
 800168e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001692:	6013      	str	r3, [r2, #0]
 8001694:	4b68      	ldr	r3, [pc, #416]	; (8001838 <HAL_RCC_OscConfig+0x26c>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a67      	ldr	r2, [pc, #412]	; (8001838 <HAL_RCC_OscConfig+0x26c>)
 800169a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800169e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d013      	beq.n	80016d0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a8:	f7ff f83e 	bl	8000728 <HAL_GetTick>
 80016ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ae:	e008      	b.n	80016c2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016b0:	f7ff f83a 	bl	8000728 <HAL_GetTick>
 80016b4:	4602      	mov	r2, r0
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	2b64      	cmp	r3, #100	; 0x64
 80016bc:	d901      	bls.n	80016c2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80016be:	2303      	movs	r3, #3
 80016c0:	e1fa      	b.n	8001ab8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016c2:	4b5d      	ldr	r3, [pc, #372]	; (8001838 <HAL_RCC_OscConfig+0x26c>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d0f0      	beq.n	80016b0 <HAL_RCC_OscConfig+0xe4>
 80016ce:	e014      	b.n	80016fa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d0:	f7ff f82a 	bl	8000728 <HAL_GetTick>
 80016d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016d6:	e008      	b.n	80016ea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016d8:	f7ff f826 	bl	8000728 <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	2b64      	cmp	r3, #100	; 0x64
 80016e4:	d901      	bls.n	80016ea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80016e6:	2303      	movs	r3, #3
 80016e8:	e1e6      	b.n	8001ab8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016ea:	4b53      	ldr	r3, [pc, #332]	; (8001838 <HAL_RCC_OscConfig+0x26c>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d1f0      	bne.n	80016d8 <HAL_RCC_OscConfig+0x10c>
 80016f6:	e000      	b.n	80016fa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 0302 	and.w	r3, r3, #2
 8001702:	2b00      	cmp	r3, #0
 8001704:	d063      	beq.n	80017ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001706:	4b4c      	ldr	r3, [pc, #304]	; (8001838 <HAL_RCC_OscConfig+0x26c>)
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	f003 030c 	and.w	r3, r3, #12
 800170e:	2b00      	cmp	r3, #0
 8001710:	d00b      	beq.n	800172a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001712:	4b49      	ldr	r3, [pc, #292]	; (8001838 <HAL_RCC_OscConfig+0x26c>)
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	f003 030c 	and.w	r3, r3, #12
 800171a:	2b08      	cmp	r3, #8
 800171c:	d11c      	bne.n	8001758 <HAL_RCC_OscConfig+0x18c>
 800171e:	4b46      	ldr	r3, [pc, #280]	; (8001838 <HAL_RCC_OscConfig+0x26c>)
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d116      	bne.n	8001758 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800172a:	4b43      	ldr	r3, [pc, #268]	; (8001838 <HAL_RCC_OscConfig+0x26c>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 0302 	and.w	r3, r3, #2
 8001732:	2b00      	cmp	r3, #0
 8001734:	d005      	beq.n	8001742 <HAL_RCC_OscConfig+0x176>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	691b      	ldr	r3, [r3, #16]
 800173a:	2b01      	cmp	r3, #1
 800173c:	d001      	beq.n	8001742 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e1ba      	b.n	8001ab8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001742:	4b3d      	ldr	r3, [pc, #244]	; (8001838 <HAL_RCC_OscConfig+0x26c>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	695b      	ldr	r3, [r3, #20]
 800174e:	00db      	lsls	r3, r3, #3
 8001750:	4939      	ldr	r1, [pc, #228]	; (8001838 <HAL_RCC_OscConfig+0x26c>)
 8001752:	4313      	orrs	r3, r2
 8001754:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001756:	e03a      	b.n	80017ce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	691b      	ldr	r3, [r3, #16]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d020      	beq.n	80017a2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001760:	4b36      	ldr	r3, [pc, #216]	; (800183c <HAL_RCC_OscConfig+0x270>)
 8001762:	2201      	movs	r2, #1
 8001764:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001766:	f7fe ffdf 	bl	8000728 <HAL_GetTick>
 800176a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800176c:	e008      	b.n	8001780 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800176e:	f7fe ffdb 	bl	8000728 <HAL_GetTick>
 8001772:	4602      	mov	r2, r0
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	1ad3      	subs	r3, r2, r3
 8001778:	2b02      	cmp	r3, #2
 800177a:	d901      	bls.n	8001780 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800177c:	2303      	movs	r3, #3
 800177e:	e19b      	b.n	8001ab8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001780:	4b2d      	ldr	r3, [pc, #180]	; (8001838 <HAL_RCC_OscConfig+0x26c>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 0302 	and.w	r3, r3, #2
 8001788:	2b00      	cmp	r3, #0
 800178a:	d0f0      	beq.n	800176e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800178c:	4b2a      	ldr	r3, [pc, #168]	; (8001838 <HAL_RCC_OscConfig+0x26c>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	695b      	ldr	r3, [r3, #20]
 8001798:	00db      	lsls	r3, r3, #3
 800179a:	4927      	ldr	r1, [pc, #156]	; (8001838 <HAL_RCC_OscConfig+0x26c>)
 800179c:	4313      	orrs	r3, r2
 800179e:	600b      	str	r3, [r1, #0]
 80017a0:	e015      	b.n	80017ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017a2:	4b26      	ldr	r3, [pc, #152]	; (800183c <HAL_RCC_OscConfig+0x270>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017a8:	f7fe ffbe 	bl	8000728 <HAL_GetTick>
 80017ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017ae:	e008      	b.n	80017c2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017b0:	f7fe ffba 	bl	8000728 <HAL_GetTick>
 80017b4:	4602      	mov	r2, r0
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d901      	bls.n	80017c2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	e17a      	b.n	8001ab8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017c2:	4b1d      	ldr	r3, [pc, #116]	; (8001838 <HAL_RCC_OscConfig+0x26c>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 0302 	and.w	r3, r3, #2
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d1f0      	bne.n	80017b0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 0308 	and.w	r3, r3, #8
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d03a      	beq.n	8001850 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	699b      	ldr	r3, [r3, #24]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d019      	beq.n	8001816 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017e2:	4b17      	ldr	r3, [pc, #92]	; (8001840 <HAL_RCC_OscConfig+0x274>)
 80017e4:	2201      	movs	r2, #1
 80017e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017e8:	f7fe ff9e 	bl	8000728 <HAL_GetTick>
 80017ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017ee:	e008      	b.n	8001802 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017f0:	f7fe ff9a 	bl	8000728 <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	2b02      	cmp	r3, #2
 80017fc:	d901      	bls.n	8001802 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e15a      	b.n	8001ab8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001802:	4b0d      	ldr	r3, [pc, #52]	; (8001838 <HAL_RCC_OscConfig+0x26c>)
 8001804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001806:	f003 0302 	and.w	r3, r3, #2
 800180a:	2b00      	cmp	r3, #0
 800180c:	d0f0      	beq.n	80017f0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800180e:	2001      	movs	r0, #1
 8001810:	f000 fada 	bl	8001dc8 <RCC_Delay>
 8001814:	e01c      	b.n	8001850 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001816:	4b0a      	ldr	r3, [pc, #40]	; (8001840 <HAL_RCC_OscConfig+0x274>)
 8001818:	2200      	movs	r2, #0
 800181a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800181c:	f7fe ff84 	bl	8000728 <HAL_GetTick>
 8001820:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001822:	e00f      	b.n	8001844 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001824:	f7fe ff80 	bl	8000728 <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	2b02      	cmp	r3, #2
 8001830:	d908      	bls.n	8001844 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e140      	b.n	8001ab8 <HAL_RCC_OscConfig+0x4ec>
 8001836:	bf00      	nop
 8001838:	40021000 	.word	0x40021000
 800183c:	42420000 	.word	0x42420000
 8001840:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001844:	4b9e      	ldr	r3, [pc, #632]	; (8001ac0 <HAL_RCC_OscConfig+0x4f4>)
 8001846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001848:	f003 0302 	and.w	r3, r3, #2
 800184c:	2b00      	cmp	r3, #0
 800184e:	d1e9      	bne.n	8001824 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 0304 	and.w	r3, r3, #4
 8001858:	2b00      	cmp	r3, #0
 800185a:	f000 80a6 	beq.w	80019aa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800185e:	2300      	movs	r3, #0
 8001860:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001862:	4b97      	ldr	r3, [pc, #604]	; (8001ac0 <HAL_RCC_OscConfig+0x4f4>)
 8001864:	69db      	ldr	r3, [r3, #28]
 8001866:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d10d      	bne.n	800188a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800186e:	4b94      	ldr	r3, [pc, #592]	; (8001ac0 <HAL_RCC_OscConfig+0x4f4>)
 8001870:	69db      	ldr	r3, [r3, #28]
 8001872:	4a93      	ldr	r2, [pc, #588]	; (8001ac0 <HAL_RCC_OscConfig+0x4f4>)
 8001874:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001878:	61d3      	str	r3, [r2, #28]
 800187a:	4b91      	ldr	r3, [pc, #580]	; (8001ac0 <HAL_RCC_OscConfig+0x4f4>)
 800187c:	69db      	ldr	r3, [r3, #28]
 800187e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001882:	60bb      	str	r3, [r7, #8]
 8001884:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001886:	2301      	movs	r3, #1
 8001888:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800188a:	4b8e      	ldr	r3, [pc, #568]	; (8001ac4 <HAL_RCC_OscConfig+0x4f8>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001892:	2b00      	cmp	r3, #0
 8001894:	d118      	bne.n	80018c8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001896:	4b8b      	ldr	r3, [pc, #556]	; (8001ac4 <HAL_RCC_OscConfig+0x4f8>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a8a      	ldr	r2, [pc, #552]	; (8001ac4 <HAL_RCC_OscConfig+0x4f8>)
 800189c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018a2:	f7fe ff41 	bl	8000728 <HAL_GetTick>
 80018a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018a8:	e008      	b.n	80018bc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018aa:	f7fe ff3d 	bl	8000728 <HAL_GetTick>
 80018ae:	4602      	mov	r2, r0
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	2b64      	cmp	r3, #100	; 0x64
 80018b6:	d901      	bls.n	80018bc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80018b8:	2303      	movs	r3, #3
 80018ba:	e0fd      	b.n	8001ab8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018bc:	4b81      	ldr	r3, [pc, #516]	; (8001ac4 <HAL_RCC_OscConfig+0x4f8>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d0f0      	beq.n	80018aa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d106      	bne.n	80018de <HAL_RCC_OscConfig+0x312>
 80018d0:	4b7b      	ldr	r3, [pc, #492]	; (8001ac0 <HAL_RCC_OscConfig+0x4f4>)
 80018d2:	6a1b      	ldr	r3, [r3, #32]
 80018d4:	4a7a      	ldr	r2, [pc, #488]	; (8001ac0 <HAL_RCC_OscConfig+0x4f4>)
 80018d6:	f043 0301 	orr.w	r3, r3, #1
 80018da:	6213      	str	r3, [r2, #32]
 80018dc:	e02d      	b.n	800193a <HAL_RCC_OscConfig+0x36e>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	68db      	ldr	r3, [r3, #12]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d10c      	bne.n	8001900 <HAL_RCC_OscConfig+0x334>
 80018e6:	4b76      	ldr	r3, [pc, #472]	; (8001ac0 <HAL_RCC_OscConfig+0x4f4>)
 80018e8:	6a1b      	ldr	r3, [r3, #32]
 80018ea:	4a75      	ldr	r2, [pc, #468]	; (8001ac0 <HAL_RCC_OscConfig+0x4f4>)
 80018ec:	f023 0301 	bic.w	r3, r3, #1
 80018f0:	6213      	str	r3, [r2, #32]
 80018f2:	4b73      	ldr	r3, [pc, #460]	; (8001ac0 <HAL_RCC_OscConfig+0x4f4>)
 80018f4:	6a1b      	ldr	r3, [r3, #32]
 80018f6:	4a72      	ldr	r2, [pc, #456]	; (8001ac0 <HAL_RCC_OscConfig+0x4f4>)
 80018f8:	f023 0304 	bic.w	r3, r3, #4
 80018fc:	6213      	str	r3, [r2, #32]
 80018fe:	e01c      	b.n	800193a <HAL_RCC_OscConfig+0x36e>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	2b05      	cmp	r3, #5
 8001906:	d10c      	bne.n	8001922 <HAL_RCC_OscConfig+0x356>
 8001908:	4b6d      	ldr	r3, [pc, #436]	; (8001ac0 <HAL_RCC_OscConfig+0x4f4>)
 800190a:	6a1b      	ldr	r3, [r3, #32]
 800190c:	4a6c      	ldr	r2, [pc, #432]	; (8001ac0 <HAL_RCC_OscConfig+0x4f4>)
 800190e:	f043 0304 	orr.w	r3, r3, #4
 8001912:	6213      	str	r3, [r2, #32]
 8001914:	4b6a      	ldr	r3, [pc, #424]	; (8001ac0 <HAL_RCC_OscConfig+0x4f4>)
 8001916:	6a1b      	ldr	r3, [r3, #32]
 8001918:	4a69      	ldr	r2, [pc, #420]	; (8001ac0 <HAL_RCC_OscConfig+0x4f4>)
 800191a:	f043 0301 	orr.w	r3, r3, #1
 800191e:	6213      	str	r3, [r2, #32]
 8001920:	e00b      	b.n	800193a <HAL_RCC_OscConfig+0x36e>
 8001922:	4b67      	ldr	r3, [pc, #412]	; (8001ac0 <HAL_RCC_OscConfig+0x4f4>)
 8001924:	6a1b      	ldr	r3, [r3, #32]
 8001926:	4a66      	ldr	r2, [pc, #408]	; (8001ac0 <HAL_RCC_OscConfig+0x4f4>)
 8001928:	f023 0301 	bic.w	r3, r3, #1
 800192c:	6213      	str	r3, [r2, #32]
 800192e:	4b64      	ldr	r3, [pc, #400]	; (8001ac0 <HAL_RCC_OscConfig+0x4f4>)
 8001930:	6a1b      	ldr	r3, [r3, #32]
 8001932:	4a63      	ldr	r2, [pc, #396]	; (8001ac0 <HAL_RCC_OscConfig+0x4f4>)
 8001934:	f023 0304 	bic.w	r3, r3, #4
 8001938:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	68db      	ldr	r3, [r3, #12]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d015      	beq.n	800196e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001942:	f7fe fef1 	bl	8000728 <HAL_GetTick>
 8001946:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001948:	e00a      	b.n	8001960 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800194a:	f7fe feed 	bl	8000728 <HAL_GetTick>
 800194e:	4602      	mov	r2, r0
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	f241 3288 	movw	r2, #5000	; 0x1388
 8001958:	4293      	cmp	r3, r2
 800195a:	d901      	bls.n	8001960 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800195c:	2303      	movs	r3, #3
 800195e:	e0ab      	b.n	8001ab8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001960:	4b57      	ldr	r3, [pc, #348]	; (8001ac0 <HAL_RCC_OscConfig+0x4f4>)
 8001962:	6a1b      	ldr	r3, [r3, #32]
 8001964:	f003 0302 	and.w	r3, r3, #2
 8001968:	2b00      	cmp	r3, #0
 800196a:	d0ee      	beq.n	800194a <HAL_RCC_OscConfig+0x37e>
 800196c:	e014      	b.n	8001998 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800196e:	f7fe fedb 	bl	8000728 <HAL_GetTick>
 8001972:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001974:	e00a      	b.n	800198c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001976:	f7fe fed7 	bl	8000728 <HAL_GetTick>
 800197a:	4602      	mov	r2, r0
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	1ad3      	subs	r3, r2, r3
 8001980:	f241 3288 	movw	r2, #5000	; 0x1388
 8001984:	4293      	cmp	r3, r2
 8001986:	d901      	bls.n	800198c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001988:	2303      	movs	r3, #3
 800198a:	e095      	b.n	8001ab8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800198c:	4b4c      	ldr	r3, [pc, #304]	; (8001ac0 <HAL_RCC_OscConfig+0x4f4>)
 800198e:	6a1b      	ldr	r3, [r3, #32]
 8001990:	f003 0302 	and.w	r3, r3, #2
 8001994:	2b00      	cmp	r3, #0
 8001996:	d1ee      	bne.n	8001976 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001998:	7dfb      	ldrb	r3, [r7, #23]
 800199a:	2b01      	cmp	r3, #1
 800199c:	d105      	bne.n	80019aa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800199e:	4b48      	ldr	r3, [pc, #288]	; (8001ac0 <HAL_RCC_OscConfig+0x4f4>)
 80019a0:	69db      	ldr	r3, [r3, #28]
 80019a2:	4a47      	ldr	r2, [pc, #284]	; (8001ac0 <HAL_RCC_OscConfig+0x4f4>)
 80019a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019a8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	69db      	ldr	r3, [r3, #28]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	f000 8081 	beq.w	8001ab6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019b4:	4b42      	ldr	r3, [pc, #264]	; (8001ac0 <HAL_RCC_OscConfig+0x4f4>)
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f003 030c 	and.w	r3, r3, #12
 80019bc:	2b08      	cmp	r3, #8
 80019be:	d061      	beq.n	8001a84 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	69db      	ldr	r3, [r3, #28]
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d146      	bne.n	8001a56 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019c8:	4b3f      	ldr	r3, [pc, #252]	; (8001ac8 <HAL_RCC_OscConfig+0x4fc>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ce:	f7fe feab 	bl	8000728 <HAL_GetTick>
 80019d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019d4:	e008      	b.n	80019e8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019d6:	f7fe fea7 	bl	8000728 <HAL_GetTick>
 80019da:	4602      	mov	r2, r0
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	2b02      	cmp	r3, #2
 80019e2:	d901      	bls.n	80019e8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80019e4:	2303      	movs	r3, #3
 80019e6:	e067      	b.n	8001ab8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019e8:	4b35      	ldr	r3, [pc, #212]	; (8001ac0 <HAL_RCC_OscConfig+0x4f4>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d1f0      	bne.n	80019d6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6a1b      	ldr	r3, [r3, #32]
 80019f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019fc:	d108      	bne.n	8001a10 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80019fe:	4b30      	ldr	r3, [pc, #192]	; (8001ac0 <HAL_RCC_OscConfig+0x4f4>)
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	492d      	ldr	r1, [pc, #180]	; (8001ac0 <HAL_RCC_OscConfig+0x4f4>)
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a10:	4b2b      	ldr	r3, [pc, #172]	; (8001ac0 <HAL_RCC_OscConfig+0x4f4>)
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6a19      	ldr	r1, [r3, #32]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a20:	430b      	orrs	r3, r1
 8001a22:	4927      	ldr	r1, [pc, #156]	; (8001ac0 <HAL_RCC_OscConfig+0x4f4>)
 8001a24:	4313      	orrs	r3, r2
 8001a26:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a28:	4b27      	ldr	r3, [pc, #156]	; (8001ac8 <HAL_RCC_OscConfig+0x4fc>)
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a2e:	f7fe fe7b 	bl	8000728 <HAL_GetTick>
 8001a32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a34:	e008      	b.n	8001a48 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a36:	f7fe fe77 	bl	8000728 <HAL_GetTick>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d901      	bls.n	8001a48 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001a44:	2303      	movs	r3, #3
 8001a46:	e037      	b.n	8001ab8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a48:	4b1d      	ldr	r3, [pc, #116]	; (8001ac0 <HAL_RCC_OscConfig+0x4f4>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d0f0      	beq.n	8001a36 <HAL_RCC_OscConfig+0x46a>
 8001a54:	e02f      	b.n	8001ab6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a56:	4b1c      	ldr	r3, [pc, #112]	; (8001ac8 <HAL_RCC_OscConfig+0x4fc>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a5c:	f7fe fe64 	bl	8000728 <HAL_GetTick>
 8001a60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a62:	e008      	b.n	8001a76 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a64:	f7fe fe60 	bl	8000728 <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d901      	bls.n	8001a76 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e020      	b.n	8001ab8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a76:	4b12      	ldr	r3, [pc, #72]	; (8001ac0 <HAL_RCC_OscConfig+0x4f4>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d1f0      	bne.n	8001a64 <HAL_RCC_OscConfig+0x498>
 8001a82:	e018      	b.n	8001ab6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	69db      	ldr	r3, [r3, #28]
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d101      	bne.n	8001a90 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e013      	b.n	8001ab8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a90:	4b0b      	ldr	r3, [pc, #44]	; (8001ac0 <HAL_RCC_OscConfig+0x4f4>)
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6a1b      	ldr	r3, [r3, #32]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d106      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d001      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e000      	b.n	8001ab8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001ab6:	2300      	movs	r3, #0
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3718      	adds	r7, #24
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	40021000 	.word	0x40021000
 8001ac4:	40007000 	.word	0x40007000
 8001ac8:	42420060 	.word	0x42420060

08001acc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b084      	sub	sp, #16
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d101      	bne.n	8001ae0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e0d0      	b.n	8001c82 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ae0:	4b6a      	ldr	r3, [pc, #424]	; (8001c8c <HAL_RCC_ClockConfig+0x1c0>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0307 	and.w	r3, r3, #7
 8001ae8:	683a      	ldr	r2, [r7, #0]
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d910      	bls.n	8001b10 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aee:	4b67      	ldr	r3, [pc, #412]	; (8001c8c <HAL_RCC_ClockConfig+0x1c0>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f023 0207 	bic.w	r2, r3, #7
 8001af6:	4965      	ldr	r1, [pc, #404]	; (8001c8c <HAL_RCC_ClockConfig+0x1c0>)
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001afe:	4b63      	ldr	r3, [pc, #396]	; (8001c8c <HAL_RCC_ClockConfig+0x1c0>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 0307 	and.w	r3, r3, #7
 8001b06:	683a      	ldr	r2, [r7, #0]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d001      	beq.n	8001b10 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e0b8      	b.n	8001c82 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0302 	and.w	r3, r3, #2
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d020      	beq.n	8001b5e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 0304 	and.w	r3, r3, #4
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d005      	beq.n	8001b34 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b28:	4b59      	ldr	r3, [pc, #356]	; (8001c90 <HAL_RCC_ClockConfig+0x1c4>)
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	4a58      	ldr	r2, [pc, #352]	; (8001c90 <HAL_RCC_ClockConfig+0x1c4>)
 8001b2e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001b32:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 0308 	and.w	r3, r3, #8
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d005      	beq.n	8001b4c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b40:	4b53      	ldr	r3, [pc, #332]	; (8001c90 <HAL_RCC_ClockConfig+0x1c4>)
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	4a52      	ldr	r2, [pc, #328]	; (8001c90 <HAL_RCC_ClockConfig+0x1c4>)
 8001b46:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001b4a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b4c:	4b50      	ldr	r3, [pc, #320]	; (8001c90 <HAL_RCC_ClockConfig+0x1c4>)
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	494d      	ldr	r1, [pc, #308]	; (8001c90 <HAL_RCC_ClockConfig+0x1c4>)
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0301 	and.w	r3, r3, #1
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d040      	beq.n	8001bec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d107      	bne.n	8001b82 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b72:	4b47      	ldr	r3, [pc, #284]	; (8001c90 <HAL_RCC_ClockConfig+0x1c4>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d115      	bne.n	8001baa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e07f      	b.n	8001c82 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	d107      	bne.n	8001b9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b8a:	4b41      	ldr	r3, [pc, #260]	; (8001c90 <HAL_RCC_ClockConfig+0x1c4>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d109      	bne.n	8001baa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e073      	b.n	8001c82 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b9a:	4b3d      	ldr	r3, [pc, #244]	; (8001c90 <HAL_RCC_ClockConfig+0x1c4>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0302 	and.w	r3, r3, #2
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d101      	bne.n	8001baa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e06b      	b.n	8001c82 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001baa:	4b39      	ldr	r3, [pc, #228]	; (8001c90 <HAL_RCC_ClockConfig+0x1c4>)
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f023 0203 	bic.w	r2, r3, #3
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	4936      	ldr	r1, [pc, #216]	; (8001c90 <HAL_RCC_ClockConfig+0x1c4>)
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bbc:	f7fe fdb4 	bl	8000728 <HAL_GetTick>
 8001bc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bc2:	e00a      	b.n	8001bda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bc4:	f7fe fdb0 	bl	8000728 <HAL_GetTick>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d901      	bls.n	8001bda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e053      	b.n	8001c82 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bda:	4b2d      	ldr	r3, [pc, #180]	; (8001c90 <HAL_RCC_ClockConfig+0x1c4>)
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f003 020c 	and.w	r2, r3, #12
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d1eb      	bne.n	8001bc4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001bec:	4b27      	ldr	r3, [pc, #156]	; (8001c8c <HAL_RCC_ClockConfig+0x1c0>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0307 	and.w	r3, r3, #7
 8001bf4:	683a      	ldr	r2, [r7, #0]
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d210      	bcs.n	8001c1c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bfa:	4b24      	ldr	r3, [pc, #144]	; (8001c8c <HAL_RCC_ClockConfig+0x1c0>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f023 0207 	bic.w	r2, r3, #7
 8001c02:	4922      	ldr	r1, [pc, #136]	; (8001c8c <HAL_RCC_ClockConfig+0x1c0>)
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c0a:	4b20      	ldr	r3, [pc, #128]	; (8001c8c <HAL_RCC_ClockConfig+0x1c0>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0307 	and.w	r3, r3, #7
 8001c12:	683a      	ldr	r2, [r7, #0]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d001      	beq.n	8001c1c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e032      	b.n	8001c82 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 0304 	and.w	r3, r3, #4
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d008      	beq.n	8001c3a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c28:	4b19      	ldr	r3, [pc, #100]	; (8001c90 <HAL_RCC_ClockConfig+0x1c4>)
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	4916      	ldr	r1, [pc, #88]	; (8001c90 <HAL_RCC_ClockConfig+0x1c4>)
 8001c36:	4313      	orrs	r3, r2
 8001c38:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0308 	and.w	r3, r3, #8
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d009      	beq.n	8001c5a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c46:	4b12      	ldr	r3, [pc, #72]	; (8001c90 <HAL_RCC_ClockConfig+0x1c4>)
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	691b      	ldr	r3, [r3, #16]
 8001c52:	00db      	lsls	r3, r3, #3
 8001c54:	490e      	ldr	r1, [pc, #56]	; (8001c90 <HAL_RCC_ClockConfig+0x1c4>)
 8001c56:	4313      	orrs	r3, r2
 8001c58:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c5a:	f000 f821 	bl	8001ca0 <HAL_RCC_GetSysClockFreq>
 8001c5e:	4601      	mov	r1, r0
 8001c60:	4b0b      	ldr	r3, [pc, #44]	; (8001c90 <HAL_RCC_ClockConfig+0x1c4>)
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	091b      	lsrs	r3, r3, #4
 8001c66:	f003 030f 	and.w	r3, r3, #15
 8001c6a:	4a0a      	ldr	r2, [pc, #40]	; (8001c94 <HAL_RCC_ClockConfig+0x1c8>)
 8001c6c:	5cd3      	ldrb	r3, [r2, r3]
 8001c6e:	fa21 f303 	lsr.w	r3, r1, r3
 8001c72:	4a09      	ldr	r2, [pc, #36]	; (8001c98 <HAL_RCC_ClockConfig+0x1cc>)
 8001c74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c76:	4b09      	ldr	r3, [pc, #36]	; (8001c9c <HAL_RCC_ClockConfig+0x1d0>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7fe fd12 	bl	80006a4 <HAL_InitTick>

  return HAL_OK;
 8001c80:	2300      	movs	r3, #0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3710      	adds	r7, #16
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	40022000 	.word	0x40022000
 8001c90:	40021000 	.word	0x40021000
 8001c94:	080026b8 	.word	0x080026b8
 8001c98:	20000000 	.word	0x20000000
 8001c9c:	20000004 	.word	0x20000004

08001ca0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ca0:	b490      	push	{r4, r7}
 8001ca2:	b08a      	sub	sp, #40	; 0x28
 8001ca4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001ca6:	4b2a      	ldr	r3, [pc, #168]	; (8001d50 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001ca8:	1d3c      	adds	r4, r7, #4
 8001caa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001cac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001cb0:	4b28      	ldr	r3, [pc, #160]	; (8001d54 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001cb2:	881b      	ldrh	r3, [r3, #0]
 8001cb4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	61fb      	str	r3, [r7, #28]
 8001cba:	2300      	movs	r3, #0
 8001cbc:	61bb      	str	r3, [r7, #24]
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	627b      	str	r3, [r7, #36]	; 0x24
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001cca:	4b23      	ldr	r3, [pc, #140]	; (8001d58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	f003 030c 	and.w	r3, r3, #12
 8001cd6:	2b04      	cmp	r3, #4
 8001cd8:	d002      	beq.n	8001ce0 <HAL_RCC_GetSysClockFreq+0x40>
 8001cda:	2b08      	cmp	r3, #8
 8001cdc:	d003      	beq.n	8001ce6 <HAL_RCC_GetSysClockFreq+0x46>
 8001cde:	e02d      	b.n	8001d3c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ce0:	4b1e      	ldr	r3, [pc, #120]	; (8001d5c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ce2:	623b      	str	r3, [r7, #32]
      break;
 8001ce4:	e02d      	b.n	8001d42 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	0c9b      	lsrs	r3, r3, #18
 8001cea:	f003 030f 	and.w	r3, r3, #15
 8001cee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001cf2:	4413      	add	r3, r2
 8001cf4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001cf8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d013      	beq.n	8001d2c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d04:	4b14      	ldr	r3, [pc, #80]	; (8001d58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	0c5b      	lsrs	r3, r3, #17
 8001d0a:	f003 0301 	and.w	r3, r3, #1
 8001d0e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001d12:	4413      	add	r3, r2
 8001d14:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001d18:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	4a0f      	ldr	r2, [pc, #60]	; (8001d5c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d1e:	fb02 f203 	mul.w	r2, r2, r3
 8001d22:	69bb      	ldr	r3, [r7, #24]
 8001d24:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d28:	627b      	str	r3, [r7, #36]	; 0x24
 8001d2a:	e004      	b.n	8001d36 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	4a0c      	ldr	r2, [pc, #48]	; (8001d60 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001d30:	fb02 f303 	mul.w	r3, r2, r3
 8001d34:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d38:	623b      	str	r3, [r7, #32]
      break;
 8001d3a:	e002      	b.n	8001d42 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d3c:	4b07      	ldr	r3, [pc, #28]	; (8001d5c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d3e:	623b      	str	r3, [r7, #32]
      break;
 8001d40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d42:	6a3b      	ldr	r3, [r7, #32]
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3728      	adds	r7, #40	; 0x28
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bc90      	pop	{r4, r7}
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	080026a4 	.word	0x080026a4
 8001d54:	080026b4 	.word	0x080026b4
 8001d58:	40021000 	.word	0x40021000
 8001d5c:	007a1200 	.word	0x007a1200
 8001d60:	003d0900 	.word	0x003d0900

08001d64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d68:	4b02      	ldr	r3, [pc, #8]	; (8001d74 <HAL_RCC_GetHCLKFreq+0x10>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bc80      	pop	{r7}
 8001d72:	4770      	bx	lr
 8001d74:	20000000 	.word	0x20000000

08001d78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d7c:	f7ff fff2 	bl	8001d64 <HAL_RCC_GetHCLKFreq>
 8001d80:	4601      	mov	r1, r0
 8001d82:	4b05      	ldr	r3, [pc, #20]	; (8001d98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	0a1b      	lsrs	r3, r3, #8
 8001d88:	f003 0307 	and.w	r3, r3, #7
 8001d8c:	4a03      	ldr	r2, [pc, #12]	; (8001d9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d8e:	5cd3      	ldrb	r3, [r2, r3]
 8001d90:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	40021000 	.word	0x40021000
 8001d9c:	080026c8 	.word	0x080026c8

08001da0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001da4:	f7ff ffde 	bl	8001d64 <HAL_RCC_GetHCLKFreq>
 8001da8:	4601      	mov	r1, r0
 8001daa:	4b05      	ldr	r3, [pc, #20]	; (8001dc0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	0adb      	lsrs	r3, r3, #11
 8001db0:	f003 0307 	and.w	r3, r3, #7
 8001db4:	4a03      	ldr	r2, [pc, #12]	; (8001dc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001db6:	5cd3      	ldrb	r3, [r2, r3]
 8001db8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	40021000 	.word	0x40021000
 8001dc4:	080026c8 	.word	0x080026c8

08001dc8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b085      	sub	sp, #20
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001dd0:	4b0a      	ldr	r3, [pc, #40]	; (8001dfc <RCC_Delay+0x34>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a0a      	ldr	r2, [pc, #40]	; (8001e00 <RCC_Delay+0x38>)
 8001dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8001dda:	0a5b      	lsrs	r3, r3, #9
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	fb02 f303 	mul.w	r3, r2, r3
 8001de2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001de4:	bf00      	nop
  }
  while (Delay --);
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	1e5a      	subs	r2, r3, #1
 8001dea:	60fa      	str	r2, [r7, #12]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d1f9      	bne.n	8001de4 <RCC_Delay+0x1c>
}
 8001df0:	bf00      	nop
 8001df2:	3714      	adds	r7, #20
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bc80      	pop	{r7}
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	20000000 	.word	0x20000000
 8001e00:	10624dd3 	.word	0x10624dd3

08001e04 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b086      	sub	sp, #24
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	613b      	str	r3, [r7, #16]
 8001e10:	2300      	movs	r3, #0
 8001e12:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 0301 	and.w	r3, r3, #1
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d07d      	beq.n	8001f1c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8001e20:	2300      	movs	r3, #0
 8001e22:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e24:	4b4f      	ldr	r3, [pc, #316]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e26:	69db      	ldr	r3, [r3, #28]
 8001e28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d10d      	bne.n	8001e4c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e30:	4b4c      	ldr	r3, [pc, #304]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e32:	69db      	ldr	r3, [r3, #28]
 8001e34:	4a4b      	ldr	r2, [pc, #300]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e3a:	61d3      	str	r3, [r2, #28]
 8001e3c:	4b49      	ldr	r3, [pc, #292]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e3e:	69db      	ldr	r3, [r3, #28]
 8001e40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e44:	60bb      	str	r3, [r7, #8]
 8001e46:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e4c:	4b46      	ldr	r3, [pc, #280]	; (8001f68 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d118      	bne.n	8001e8a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e58:	4b43      	ldr	r3, [pc, #268]	; (8001f68 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a42      	ldr	r2, [pc, #264]	; (8001f68 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e62:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e64:	f7fe fc60 	bl	8000728 <HAL_GetTick>
 8001e68:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e6a:	e008      	b.n	8001e7e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e6c:	f7fe fc5c 	bl	8000728 <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	2b64      	cmp	r3, #100	; 0x64
 8001e78:	d901      	bls.n	8001e7e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e06d      	b.n	8001f5a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e7e:	4b3a      	ldr	r3, [pc, #232]	; (8001f68 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d0f0      	beq.n	8001e6c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001e8a:	4b36      	ldr	r3, [pc, #216]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e8c:	6a1b      	ldr	r3, [r3, #32]
 8001e8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e92:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d02e      	beq.n	8001ef8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ea2:	68fa      	ldr	r2, [r7, #12]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d027      	beq.n	8001ef8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001ea8:	4b2e      	ldr	r3, [pc, #184]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001eaa:	6a1b      	ldr	r3, [r3, #32]
 8001eac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001eb0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001eb2:	4b2e      	ldr	r3, [pc, #184]	; (8001f6c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001eb8:	4b2c      	ldr	r3, [pc, #176]	; (8001f6c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001ebe:	4a29      	ldr	r2, [pc, #164]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	f003 0301 	and.w	r3, r3, #1
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d014      	beq.n	8001ef8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ece:	f7fe fc2b 	bl	8000728 <HAL_GetTick>
 8001ed2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ed4:	e00a      	b.n	8001eec <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ed6:	f7fe fc27 	bl	8000728 <HAL_GetTick>
 8001eda:	4602      	mov	r2, r0
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	1ad3      	subs	r3, r2, r3
 8001ee0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d901      	bls.n	8001eec <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	e036      	b.n	8001f5a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eec:	4b1d      	ldr	r3, [pc, #116]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001eee:	6a1b      	ldr	r3, [r3, #32]
 8001ef0:	f003 0302 	and.w	r3, r3, #2
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d0ee      	beq.n	8001ed6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ef8:	4b1a      	ldr	r3, [pc, #104]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001efa:	6a1b      	ldr	r3, [r3, #32]
 8001efc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	4917      	ldr	r1, [pc, #92]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f06:	4313      	orrs	r3, r2
 8001f08:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f0a:	7dfb      	ldrb	r3, [r7, #23]
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d105      	bne.n	8001f1c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f10:	4b14      	ldr	r3, [pc, #80]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f12:	69db      	ldr	r3, [r3, #28]
 8001f14:	4a13      	ldr	r2, [pc, #76]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f1a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 0302 	and.w	r3, r3, #2
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d008      	beq.n	8001f3a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001f28:	4b0e      	ldr	r3, [pc, #56]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	490b      	ldr	r1, [pc, #44]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f36:	4313      	orrs	r3, r2
 8001f38:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0310 	and.w	r3, r3, #16
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d008      	beq.n	8001f58 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001f46:	4b07      	ldr	r3, [pc, #28]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	68db      	ldr	r3, [r3, #12]
 8001f52:	4904      	ldr	r1, [pc, #16]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f54:	4313      	orrs	r3, r2
 8001f56:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001f58:	2300      	movs	r3, #0
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3718      	adds	r7, #24
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	40021000 	.word	0x40021000
 8001f68:	40007000 	.word	0x40007000
 8001f6c:	42420440 	.word	0x42420440

08001f70 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d101      	bne.n	8001f82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e03f      	b.n	8002002 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d106      	bne.n	8001f9c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2200      	movs	r2, #0
 8001f92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f7fe fa82 	bl	80004a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2224      	movs	r2, #36	; 0x24
 8001fa0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	68da      	ldr	r2, [r3, #12]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001fb2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	f000 fa5f 	bl	8002478 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	691a      	ldr	r2, [r3, #16]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001fc8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	695a      	ldr	r2, [r3, #20]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001fd8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	68da      	ldr	r2, [r3, #12]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001fe8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2220      	movs	r2, #32
 8001ff4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2220      	movs	r2, #32
 8001ffc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002000:	2300      	movs	r3, #0
}
 8002002:	4618      	mov	r0, r3
 8002004:	3708      	adds	r7, #8
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
	...

0800200c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b088      	sub	sp, #32
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	68db      	ldr	r3, [r3, #12]
 8002022:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	695b      	ldr	r3, [r3, #20]
 800202a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800202c:	2300      	movs	r3, #0
 800202e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002030:	2300      	movs	r3, #0
 8002032:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	f003 030f 	and.w	r3, r3, #15
 800203a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d10d      	bne.n	800205e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	f003 0320 	and.w	r3, r3, #32
 8002048:	2b00      	cmp	r3, #0
 800204a:	d008      	beq.n	800205e <HAL_UART_IRQHandler+0x52>
 800204c:	69bb      	ldr	r3, [r7, #24]
 800204e:	f003 0320 	and.w	r3, r3, #32
 8002052:	2b00      	cmp	r3, #0
 8002054:	d003      	beq.n	800205e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f000 f98d 	bl	8002376 <UART_Receive_IT>
      return;
 800205c:	e0cc      	b.n	80021f8 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	2b00      	cmp	r3, #0
 8002062:	f000 80ab 	beq.w	80021bc <HAL_UART_IRQHandler+0x1b0>
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	f003 0301 	and.w	r3, r3, #1
 800206c:	2b00      	cmp	r3, #0
 800206e:	d105      	bne.n	800207c <HAL_UART_IRQHandler+0x70>
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002076:	2b00      	cmp	r3, #0
 8002078:	f000 80a0 	beq.w	80021bc <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	f003 0301 	and.w	r3, r3, #1
 8002082:	2b00      	cmp	r3, #0
 8002084:	d00a      	beq.n	800209c <HAL_UART_IRQHandler+0x90>
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800208c:	2b00      	cmp	r3, #0
 800208e:	d005      	beq.n	800209c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002094:	f043 0201 	orr.w	r2, r3, #1
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	f003 0304 	and.w	r3, r3, #4
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d00a      	beq.n	80020bc <HAL_UART_IRQHandler+0xb0>
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	f003 0301 	and.w	r3, r3, #1
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d005      	beq.n	80020bc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020b4:	f043 0202 	orr.w	r2, r3, #2
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	f003 0302 	and.w	r3, r3, #2
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d00a      	beq.n	80020dc <HAL_UART_IRQHandler+0xd0>
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	f003 0301 	and.w	r3, r3, #1
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d005      	beq.n	80020dc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020d4:	f043 0204 	orr.w	r2, r3, #4
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	f003 0308 	and.w	r3, r3, #8
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d00a      	beq.n	80020fc <HAL_UART_IRQHandler+0xf0>
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	f003 0301 	and.w	r3, r3, #1
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d005      	beq.n	80020fc <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020f4:	f043 0208 	orr.w	r2, r3, #8
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002100:	2b00      	cmp	r3, #0
 8002102:	d078      	beq.n	80021f6 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	f003 0320 	and.w	r3, r3, #32
 800210a:	2b00      	cmp	r3, #0
 800210c:	d007      	beq.n	800211e <HAL_UART_IRQHandler+0x112>
 800210e:	69bb      	ldr	r3, [r7, #24]
 8002110:	f003 0320 	and.w	r3, r3, #32
 8002114:	2b00      	cmp	r3, #0
 8002116:	d002      	beq.n	800211e <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f000 f92c 	bl	8002376 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	695b      	ldr	r3, [r3, #20]
 8002124:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002128:	2b00      	cmp	r3, #0
 800212a:	bf14      	ite	ne
 800212c:	2301      	movne	r3, #1
 800212e:	2300      	moveq	r3, #0
 8002130:	b2db      	uxtb	r3, r3
 8002132:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002138:	f003 0308 	and.w	r3, r3, #8
 800213c:	2b00      	cmp	r3, #0
 800213e:	d102      	bne.n	8002146 <HAL_UART_IRQHandler+0x13a>
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d031      	beq.n	80021aa <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f000 f877 	bl	800223a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	695b      	ldr	r3, [r3, #20]
 8002152:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002156:	2b00      	cmp	r3, #0
 8002158:	d023      	beq.n	80021a2 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	695a      	ldr	r2, [r3, #20]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002168:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800216e:	2b00      	cmp	r3, #0
 8002170:	d013      	beq.n	800219a <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002176:	4a22      	ldr	r2, [pc, #136]	; (8002200 <HAL_UART_IRQHandler+0x1f4>)
 8002178:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800217e:	4618      	mov	r0, r3
 8002180:	f7fe ff4e 	bl	8001020 <HAL_DMA_Abort_IT>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d016      	beq.n	80021b8 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800218e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002194:	4610      	mov	r0, r2
 8002196:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002198:	e00e      	b.n	80021b8 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f000 f844 	bl	8002228 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021a0:	e00a      	b.n	80021b8 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f000 f840 	bl	8002228 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021a8:	e006      	b.n	80021b8 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f000 f83c 	bl	8002228 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2200      	movs	r2, #0
 80021b4:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80021b6:	e01e      	b.n	80021f6 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021b8:	bf00      	nop
    return;
 80021ba:	e01c      	b.n	80021f6 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d008      	beq.n	80021d8 <HAL_UART_IRQHandler+0x1cc>
 80021c6:	69bb      	ldr	r3, [r7, #24]
 80021c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d003      	beq.n	80021d8 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f000 f863 	bl	800229c <UART_Transmit_IT>
    return;
 80021d6:	e00f      	b.n	80021f8 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d00a      	beq.n	80021f8 <HAL_UART_IRQHandler+0x1ec>
 80021e2:	69bb      	ldr	r3, [r7, #24]
 80021e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d005      	beq.n	80021f8 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	f000 f8aa 	bl	8002346 <UART_EndTransmit_IT>
    return;
 80021f2:	bf00      	nop
 80021f4:	e000      	b.n	80021f8 <HAL_UART_IRQHandler+0x1ec>
    return;
 80021f6:	bf00      	nop
  }
}
 80021f8:	3720      	adds	r7, #32
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	08002275 	.word	0x08002275

08002204 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800220c:	bf00      	nop
 800220e:	370c      	adds	r7, #12
 8002210:	46bd      	mov	sp, r7
 8002212:	bc80      	pop	{r7}
 8002214:	4770      	bx	lr

08002216 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002216:	b480      	push	{r7}
 8002218:	b083      	sub	sp, #12
 800221a:	af00      	add	r7, sp, #0
 800221c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800221e:	bf00      	nop
 8002220:	370c      	adds	r7, #12
 8002222:	46bd      	mov	sp, r7
 8002224:	bc80      	pop	{r7}
 8002226:	4770      	bx	lr

08002228 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002230:	bf00      	nop
 8002232:	370c      	adds	r7, #12
 8002234:	46bd      	mov	sp, r7
 8002236:	bc80      	pop	{r7}
 8002238:	4770      	bx	lr

0800223a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800223a:	b480      	push	{r7}
 800223c:	b083      	sub	sp, #12
 800223e:	af00      	add	r7, sp, #0
 8002240:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	68da      	ldr	r2, [r3, #12]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002250:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	695a      	ldr	r2, [r3, #20]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f022 0201 	bic.w	r2, r2, #1
 8002260:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2220      	movs	r2, #32
 8002266:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800226a:	bf00      	nop
 800226c:	370c      	adds	r7, #12
 800226e:	46bd      	mov	sp, r7
 8002270:	bc80      	pop	{r7}
 8002272:	4770      	bx	lr

08002274 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002280:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	2200      	movs	r2, #0
 8002286:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2200      	movs	r2, #0
 800228c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800228e:	68f8      	ldr	r0, [r7, #12]
 8002290:	f7ff ffca 	bl	8002228 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002294:	bf00      	nop
 8002296:	3710      	adds	r7, #16
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}

0800229c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800229c:	b480      	push	{r7}
 800229e:	b085      	sub	sp, #20
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	2b21      	cmp	r3, #33	; 0x21
 80022ae:	d144      	bne.n	800233a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022b8:	d11a      	bne.n	80022f0 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6a1b      	ldr	r3, [r3, #32]
 80022be:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	881b      	ldrh	r3, [r3, #0]
 80022c4:	461a      	mov	r2, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80022ce:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	691b      	ldr	r3, [r3, #16]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d105      	bne.n	80022e4 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6a1b      	ldr	r3, [r3, #32]
 80022dc:	1c9a      	adds	r2, r3, #2
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	621a      	str	r2, [r3, #32]
 80022e2:	e00e      	b.n	8002302 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6a1b      	ldr	r3, [r3, #32]
 80022e8:	1c5a      	adds	r2, r3, #1
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	621a      	str	r2, [r3, #32]
 80022ee:	e008      	b.n	8002302 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6a1b      	ldr	r3, [r3, #32]
 80022f4:	1c59      	adds	r1, r3, #1
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	6211      	str	r1, [r2, #32]
 80022fa:	781a      	ldrb	r2, [r3, #0]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002306:	b29b      	uxth	r3, r3
 8002308:	3b01      	subs	r3, #1
 800230a:	b29b      	uxth	r3, r3
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	4619      	mov	r1, r3
 8002310:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002312:	2b00      	cmp	r3, #0
 8002314:	d10f      	bne.n	8002336 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	68da      	ldr	r2, [r3, #12]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002324:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	68da      	ldr	r2, [r3, #12]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002334:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002336:	2300      	movs	r3, #0
 8002338:	e000      	b.n	800233c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800233a:	2302      	movs	r3, #2
  }
}
 800233c:	4618      	mov	r0, r3
 800233e:	3714      	adds	r7, #20
 8002340:	46bd      	mov	sp, r7
 8002342:	bc80      	pop	{r7}
 8002344:	4770      	bx	lr

08002346 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002346:	b580      	push	{r7, lr}
 8002348:	b082      	sub	sp, #8
 800234a:	af00      	add	r7, sp, #0
 800234c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	68da      	ldr	r2, [r3, #12]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800235c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2220      	movs	r2, #32
 8002362:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f7ff ff4c 	bl	8002204 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800236c:	2300      	movs	r3, #0
}
 800236e:	4618      	mov	r0, r3
 8002370:	3708      	adds	r7, #8
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}

08002376 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002376:	b580      	push	{r7, lr}
 8002378:	b084      	sub	sp, #16
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002384:	b2db      	uxtb	r3, r3
 8002386:	2b22      	cmp	r3, #34	; 0x22
 8002388:	d171      	bne.n	800246e <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002392:	d123      	bne.n	80023dc <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002398:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	691b      	ldr	r3, [r3, #16]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d10e      	bne.n	80023c0 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023ae:	b29a      	uxth	r2, r3
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b8:	1c9a      	adds	r2, r3, #2
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	629a      	str	r2, [r3, #40]	; 0x28
 80023be:	e029      	b.n	8002414 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	b29b      	uxth	r3, r3
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	b29a      	uxth	r2, r3
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d4:	1c5a      	adds	r2, r3, #1
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	629a      	str	r2, [r3, #40]	; 0x28
 80023da:	e01b      	b.n	8002414 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	691b      	ldr	r3, [r3, #16]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d10a      	bne.n	80023fa <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	6858      	ldr	r0, [r3, #4]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ee:	1c59      	adds	r1, r3, #1
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	6291      	str	r1, [r2, #40]	; 0x28
 80023f4:	b2c2      	uxtb	r2, r0
 80023f6:	701a      	strb	r2, [r3, #0]
 80023f8:	e00c      	b.n	8002414 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	b2da      	uxtb	r2, r3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002406:	1c58      	adds	r0, r3, #1
 8002408:	6879      	ldr	r1, [r7, #4]
 800240a:	6288      	str	r0, [r1, #40]	; 0x28
 800240c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002410:	b2d2      	uxtb	r2, r2
 8002412:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002418:	b29b      	uxth	r3, r3
 800241a:	3b01      	subs	r3, #1
 800241c:	b29b      	uxth	r3, r3
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	4619      	mov	r1, r3
 8002422:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002424:	2b00      	cmp	r3, #0
 8002426:	d120      	bne.n	800246a <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	68da      	ldr	r2, [r3, #12]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f022 0220 	bic.w	r2, r2, #32
 8002436:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	68da      	ldr	r2, [r3, #12]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002446:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	695a      	ldr	r2, [r3, #20]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f022 0201 	bic.w	r2, r2, #1
 8002456:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2220      	movs	r2, #32
 800245c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	f7ff fed8 	bl	8002216 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002466:	2300      	movs	r3, #0
 8002468:	e002      	b.n	8002470 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800246a:	2300      	movs	r3, #0
 800246c:	e000      	b.n	8002470 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800246e:	2302      	movs	r3, #2
  }
}
 8002470:	4618      	mov	r0, r3
 8002472:	3710      	adds	r7, #16
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}

08002478 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	691b      	ldr	r3, [r3, #16]
 8002486:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	68da      	ldr	r2, [r3, #12]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	430a      	orrs	r2, r1
 8002494:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	689a      	ldr	r2, [r3, #8]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	691b      	ldr	r3, [r3, #16]
 800249e:	431a      	orrs	r2, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	695b      	ldr	r3, [r3, #20]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	68db      	ldr	r3, [r3, #12]
 80024ae:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80024b2:	f023 030c 	bic.w	r3, r3, #12
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	6812      	ldr	r2, [r2, #0]
 80024ba:	68f9      	ldr	r1, [r7, #12]
 80024bc:	430b      	orrs	r3, r1
 80024be:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	695b      	ldr	r3, [r3, #20]
 80024c6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	699a      	ldr	r2, [r3, #24]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	430a      	orrs	r2, r1
 80024d4:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a52      	ldr	r2, [pc, #328]	; (8002624 <UART_SetConfig+0x1ac>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d14e      	bne.n	800257e <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80024e0:	f7ff fc5e 	bl	8001da0 <HAL_RCC_GetPCLK2Freq>
 80024e4:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80024e6:	68ba      	ldr	r2, [r7, #8]
 80024e8:	4613      	mov	r3, r2
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	4413      	add	r3, r2
 80024ee:	009a      	lsls	r2, r3, #2
 80024f0:	441a      	add	r2, r3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80024fc:	4a4a      	ldr	r2, [pc, #296]	; (8002628 <UART_SetConfig+0x1b0>)
 80024fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002502:	095b      	lsrs	r3, r3, #5
 8002504:	0119      	lsls	r1, r3, #4
 8002506:	68ba      	ldr	r2, [r7, #8]
 8002508:	4613      	mov	r3, r2
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	4413      	add	r3, r2
 800250e:	009a      	lsls	r2, r3, #2
 8002510:	441a      	add	r2, r3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	fbb2 f2f3 	udiv	r2, r2, r3
 800251c:	4b42      	ldr	r3, [pc, #264]	; (8002628 <UART_SetConfig+0x1b0>)
 800251e:	fba3 0302 	umull	r0, r3, r3, r2
 8002522:	095b      	lsrs	r3, r3, #5
 8002524:	2064      	movs	r0, #100	; 0x64
 8002526:	fb00 f303 	mul.w	r3, r0, r3
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	011b      	lsls	r3, r3, #4
 800252e:	3332      	adds	r3, #50	; 0x32
 8002530:	4a3d      	ldr	r2, [pc, #244]	; (8002628 <UART_SetConfig+0x1b0>)
 8002532:	fba2 2303 	umull	r2, r3, r2, r3
 8002536:	095b      	lsrs	r3, r3, #5
 8002538:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800253c:	4419      	add	r1, r3
 800253e:	68ba      	ldr	r2, [r7, #8]
 8002540:	4613      	mov	r3, r2
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	4413      	add	r3, r2
 8002546:	009a      	lsls	r2, r3, #2
 8002548:	441a      	add	r2, r3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	fbb2 f2f3 	udiv	r2, r2, r3
 8002554:	4b34      	ldr	r3, [pc, #208]	; (8002628 <UART_SetConfig+0x1b0>)
 8002556:	fba3 0302 	umull	r0, r3, r3, r2
 800255a:	095b      	lsrs	r3, r3, #5
 800255c:	2064      	movs	r0, #100	; 0x64
 800255e:	fb00 f303 	mul.w	r3, r0, r3
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	011b      	lsls	r3, r3, #4
 8002566:	3332      	adds	r3, #50	; 0x32
 8002568:	4a2f      	ldr	r2, [pc, #188]	; (8002628 <UART_SetConfig+0x1b0>)
 800256a:	fba2 2303 	umull	r2, r3, r2, r3
 800256e:	095b      	lsrs	r3, r3, #5
 8002570:	f003 020f 	and.w	r2, r3, #15
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	440a      	add	r2, r1
 800257a:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 800257c:	e04d      	b.n	800261a <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 800257e:	f7ff fbfb 	bl	8001d78 <HAL_RCC_GetPCLK1Freq>
 8002582:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002584:	68ba      	ldr	r2, [r7, #8]
 8002586:	4613      	mov	r3, r2
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	4413      	add	r3, r2
 800258c:	009a      	lsls	r2, r3, #2
 800258e:	441a      	add	r2, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	fbb2 f3f3 	udiv	r3, r2, r3
 800259a:	4a23      	ldr	r2, [pc, #140]	; (8002628 <UART_SetConfig+0x1b0>)
 800259c:	fba2 2303 	umull	r2, r3, r2, r3
 80025a0:	095b      	lsrs	r3, r3, #5
 80025a2:	0119      	lsls	r1, r3, #4
 80025a4:	68ba      	ldr	r2, [r7, #8]
 80025a6:	4613      	mov	r3, r2
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	4413      	add	r3, r2
 80025ac:	009a      	lsls	r2, r3, #2
 80025ae:	441a      	add	r2, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	fbb2 f2f3 	udiv	r2, r2, r3
 80025ba:	4b1b      	ldr	r3, [pc, #108]	; (8002628 <UART_SetConfig+0x1b0>)
 80025bc:	fba3 0302 	umull	r0, r3, r3, r2
 80025c0:	095b      	lsrs	r3, r3, #5
 80025c2:	2064      	movs	r0, #100	; 0x64
 80025c4:	fb00 f303 	mul.w	r3, r0, r3
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	011b      	lsls	r3, r3, #4
 80025cc:	3332      	adds	r3, #50	; 0x32
 80025ce:	4a16      	ldr	r2, [pc, #88]	; (8002628 <UART_SetConfig+0x1b0>)
 80025d0:	fba2 2303 	umull	r2, r3, r2, r3
 80025d4:	095b      	lsrs	r3, r3, #5
 80025d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025da:	4419      	add	r1, r3
 80025dc:	68ba      	ldr	r2, [r7, #8]
 80025de:	4613      	mov	r3, r2
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	4413      	add	r3, r2
 80025e4:	009a      	lsls	r2, r3, #2
 80025e6:	441a      	add	r2, r3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	fbb2 f2f3 	udiv	r2, r2, r3
 80025f2:	4b0d      	ldr	r3, [pc, #52]	; (8002628 <UART_SetConfig+0x1b0>)
 80025f4:	fba3 0302 	umull	r0, r3, r3, r2
 80025f8:	095b      	lsrs	r3, r3, #5
 80025fa:	2064      	movs	r0, #100	; 0x64
 80025fc:	fb00 f303 	mul.w	r3, r0, r3
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	011b      	lsls	r3, r3, #4
 8002604:	3332      	adds	r3, #50	; 0x32
 8002606:	4a08      	ldr	r2, [pc, #32]	; (8002628 <UART_SetConfig+0x1b0>)
 8002608:	fba2 2303 	umull	r2, r3, r2, r3
 800260c:	095b      	lsrs	r3, r3, #5
 800260e:	f003 020f 	and.w	r2, r3, #15
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	440a      	add	r2, r1
 8002618:	609a      	str	r2, [r3, #8]
}
 800261a:	bf00      	nop
 800261c:	3710      	adds	r7, #16
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	40013800 	.word	0x40013800
 8002628:	51eb851f 	.word	0x51eb851f

0800262c <__libc_init_array>:
 800262c:	b570      	push	{r4, r5, r6, lr}
 800262e:	2500      	movs	r5, #0
 8002630:	4e0c      	ldr	r6, [pc, #48]	; (8002664 <__libc_init_array+0x38>)
 8002632:	4c0d      	ldr	r4, [pc, #52]	; (8002668 <__libc_init_array+0x3c>)
 8002634:	1ba4      	subs	r4, r4, r6
 8002636:	10a4      	asrs	r4, r4, #2
 8002638:	42a5      	cmp	r5, r4
 800263a:	d109      	bne.n	8002650 <__libc_init_array+0x24>
 800263c:	f000 f822 	bl	8002684 <_init>
 8002640:	2500      	movs	r5, #0
 8002642:	4e0a      	ldr	r6, [pc, #40]	; (800266c <__libc_init_array+0x40>)
 8002644:	4c0a      	ldr	r4, [pc, #40]	; (8002670 <__libc_init_array+0x44>)
 8002646:	1ba4      	subs	r4, r4, r6
 8002648:	10a4      	asrs	r4, r4, #2
 800264a:	42a5      	cmp	r5, r4
 800264c:	d105      	bne.n	800265a <__libc_init_array+0x2e>
 800264e:	bd70      	pop	{r4, r5, r6, pc}
 8002650:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002654:	4798      	blx	r3
 8002656:	3501      	adds	r5, #1
 8002658:	e7ee      	b.n	8002638 <__libc_init_array+0xc>
 800265a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800265e:	4798      	blx	r3
 8002660:	3501      	adds	r5, #1
 8002662:	e7f2      	b.n	800264a <__libc_init_array+0x1e>
 8002664:	080026d0 	.word	0x080026d0
 8002668:	080026d0 	.word	0x080026d0
 800266c:	080026d0 	.word	0x080026d0
 8002670:	080026d4 	.word	0x080026d4

08002674 <memset>:
 8002674:	4603      	mov	r3, r0
 8002676:	4402      	add	r2, r0
 8002678:	4293      	cmp	r3, r2
 800267a:	d100      	bne.n	800267e <memset+0xa>
 800267c:	4770      	bx	lr
 800267e:	f803 1b01 	strb.w	r1, [r3], #1
 8002682:	e7f9      	b.n	8002678 <memset+0x4>

08002684 <_init>:
 8002684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002686:	bf00      	nop
 8002688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800268a:	bc08      	pop	{r3}
 800268c:	469e      	mov	lr, r3
 800268e:	4770      	bx	lr

08002690 <_fini>:
 8002690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002692:	bf00      	nop
 8002694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002696:	bc08      	pop	{r3}
 8002698:	469e      	mov	lr, r3
 800269a:	4770      	bx	lr
